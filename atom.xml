<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代澳旗&#39;s Blog</title>
  
  <subtitle>Welcome to my World！！！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-07T07:44:14.323Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>代澳旗</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JSP&amp;EL&amp;JSTL</title>
    <link href="http://yoursite.com/2020/02/11/JSP-EL-JSTL/"/>
    <id>http://yoursite.com/2020/02/11/JSP-EL-JSTL/</id>
    <published>2020-02-11T05:01:53.000Z</published>
    <updated>2020-03-07T07:44:14.323Z</updated>
    
    <content type="html"><![CDATA[<p>JSP，EL表达式，JSTL介绍</p><a id="more"></a><h1 id="一、JSP"><a href="#一、JSP" class="headerlink" title="一、JSP"></a>一、JSP</h1><h2 id="什么是jsp？"><a href="#什么是jsp？" class="headerlink" title="什么是jsp？"></a>什么是jsp？</h2><p><strong>Java Server Page</strong>  从用户角度看待 ，就是是一个网页 ， 从程序员角度看待 ， 其实是一个java类， 它继承了servlet，所以可以直接说jsp 就是一个Servlet.</p><h2 id="为什么会有jsp"><a href="#为什么会有jsp" class="headerlink" title="为什么会有jsp?"></a>为什么会有jsp?</h2><p>为了有更好的用户体检，更好的交互效果。因为html 多数情况下用来显示静态内容 ， 一成不变的。 但是有时候我们需要在网页上显示一些动态数据， 比如： 查询所有的学生信息， 根据姓名去查询具体某个学生。  这些动作都需要去查询数据库，然后在网页上显示。 html是不支持写java代码  ， <strong>jsp里面可以写java代码。</strong> </p><h2 id="jsp怎么用？"><a href="#jsp怎么用？" class="headerlink" title="jsp怎么用？"></a>jsp怎么用？</h2><h3 id="一、jsp指令"><a href="#一、jsp指令" class="headerlink" title="一、jsp指令"></a>一、jsp指令</h3><p><strong>一、page指令</strong></p><p><img src="https://img-blog.csdnimg.cn/20200229121757727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">指令写法：</span><br><span class="line">&lt;%@ 指令名字 %&gt;</span><br><span class="line"></span><br><span class="line">page指令：</span><br><span class="line">1. language：表明jsp页面中可以写java代码</span><br><span class="line"></span><br><span class="line">2. contentType：其实就是说这个文件是什么类型，告诉浏览器我是什么内容类型，以及使用什么编码</span><br><span class="line">contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">text/html  MIMEType 这是一个文本，html网页</span><br><span class="line"></span><br><span class="line">3. pageEncoding：jsp内容编码</span><br><span class="line"></span><br><span class="line">4. extends 用于指定jsp翻译成java文件后，继承的父类是谁，一般不用改。</span><br><span class="line"></span><br><span class="line">5. import 导包使用的，一般不用手写。</span><br><span class="line"></span><br><span class="line">6. session </span><br><span class="line"> - 值可选的有<span class="literal">true</span> or <span class="literal">false</span></span><br><span class="line"> - 用于控制在这个jsp页面里面，能够直接使用session对象。</span><br><span class="line"> - 具体的区别是，请看翻译后的java文件：</span><br><span class="line">如果该值是<span class="literal">true</span> , 那么在代码里面会有getSession（）的调用，</span><br><span class="line">如果是<span class="literal">false</span> :  那么就不会有该方法调用，也就是没有session对象了。在页面上自然也就不能使用session了。</span><br><span class="line"></span><br><span class="line">7. errorPage： 指的是错误的页面， 值需要给错误的页面路径</span><br><span class="line"></span><br><span class="line">8. isErrorPage：上面的errorPage 用于指定错误的时候跑到哪一个页面去。 那么这个isErroPage , 就是声明某一个页面到底是不是错误的页面。</span><br></pre></td></tr></table></figure><p><strong>二、include指令</strong></p><ul><li>包含另外一个jsp的内容进来。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"other02.jsp"</span>%&gt;</span><br></pre></td></tr></table></figure><ul><li>背后细节:<br>把另外一个页面的所有内容拿过来一起输出。 所有的标签元素都包含进来。</li></ul><p><strong>三、taglib</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">""</span>  uri=<span class="string">""</span>%&gt;  </span><br><span class="line">uri: 标签库路径</span><br><span class="line">prefix : 标签库的别名</span><br></pre></td></tr></table></figure><h3 id="二、jsp动作标签（写在body里面）"><a href="#二、jsp动作标签（写在body里面）" class="headerlink" title="二、jsp动作标签（写在body里面）"></a>二、jsp动作标签（写在body里面）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">""</span>&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">""</span> name=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">""</span>&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- jsp:include</span><br><span class="line">&lt;jsp:include page=<span class="string">"other02.jsp"</span>&gt;&lt;/jsp:include&gt;</span><br><span class="line">包含指定的页面， 这里是动态包含。 也就是不把包含的页面所有元素标签全部拿过来输出，而是把它的运行结果拿过来。 </span><br><span class="line"></span><br><span class="line">- jsp:forward</span><br><span class="line">前往哪一个页面。</span><br><span class="line"> &lt;jsp:forward page=<span class="string">""</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">等同于：请求转发</span><br><span class="line">&lt;% request.getRequestDispatcher(<span class="string">"other02.jsp"</span>).forward(request,response);%&gt;</span><br><span class="line"></span><br><span class="line">- jsp:param</span><br><span class="line">第一步：在包含某个页面的时候，或者在跳转某个页面的时候，加入这个参数。</span><br><span class="line">&lt;jsp:forward page=<span class="string">"other02.jsp"</span>&gt;</span><br><span class="line">&lt;jsp:param value=<span class="string">"beijing"</span> name=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line"></span><br><span class="line">第二步：在other02.jsp中获取这个参数</span><br><span class="line">&lt;br&gt;收到的参数是：&lt;br&gt;</span><br><span class="line">&lt;%= request.getParameter(<span class="string">"address"</span>)%&gt;</span><br></pre></td></tr></table></figure><h2 id="jsp内置对象（重点！）"><a href="#jsp内置对象（重点！）" class="headerlink" title="jsp内置对象（重点！）"></a>jsp内置对象（重点！）</h2><p> 所谓内置对象（有九个），就是我们可以直接在jsp页面中使用这些对象。 不用创建。</p><h3 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象"></a>作用域对象</h3><ul><li><strong>作用域对象有四个：</strong><ol><li><strong>pageContext</strong></li><li><strong>request</strong></li><li><strong>session</strong></li><li><strong>application</strong></li></ol></li></ul><ul><li><strong>作用域 ：</strong> 表示这些对象可以存值，他们的取值范围有限定。<br>用setAttribute   和  getAttribute来进行存取。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用作用域来存储数据&lt;br&gt;</span><br><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"page"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"name"</span>, <span class="string">"request"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"name"</span>, <span class="string">"session"</span>);</span><br><span class="line">application.setAttribute(<span class="string">"name"</span>, <span class="string">"application"</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">取出四个作用域中的值&lt;br&gt;</span><br><span class="line">&lt;%=pageContext.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%=request.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%=session.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%=application.getAttribute(<span class="string">"name"</span>)%&gt;</span><br></pre></td></tr></table></figure><ul><li>作用域范围大小：（由小到大）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageContext -- request --- session -- application</span><br></pre></td></tr></table></figure><ul><li>四个作用域的区别</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">11. pageContext 【PageContext】</span><br><span class="line">作用域仅限于当前的页面，还可以获取到其他八个内置对象。</span><br><span class="line"></span><br><span class="line">12. request 【HttpServletRequest】</span><br><span class="line">作用域仅限于一次请求， 只要服务器对该请求做出了响应。 这个域中存的值就没有了。</span><br><span class="line"></span><br><span class="line">13. session 【HttpSession】</span><br><span class="line">作用域限于一次会话（多次请求与响应） 当中。 </span><br><span class="line"></span><br><span class="line">14. application 【ServletContext】</span><br><span class="line"> 整个工程都可以访问， 服务器关闭后就不能访问了。</span><br></pre></td></tr></table></figure><h3 id="其他内置对象"><a href="#其他内置对象" class="headerlink" title="其他内置对象"></a>其他内置对象</h3><ul><li>out                 【JspWriter】</li><li>response      【HttpServletResponse】<br><img src="https://img-blog.csdnimg.cn/20200229140948897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>exception  【Throwable】</li><li>page             【Object】 —就是这个jsp翻译成的java类的实例对象</li><li>config         【ServletConfig】</li></ul><h1 id="二、EL表达式"><a href="#二、EL表达式" class="headerlink" title="二、EL表达式"></a>二、EL表达式</h1><ul><li>是为了简化jsp代码，具体一点就是为了简化在jsp里面写的那些java代码。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写法格式：</span><br><span class="line"><span class="variable">$&#123;表达式 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果从作用域中取值，会先从小的作用域开始取，如果没有，就往下一个作用域取。  一直把四个作用域取完都没有， 就没有显示。</li></ul><h3 id="EL取值方式"><a href="#EL取值方式" class="headerlink" title="EL取值方式"></a>EL取值方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1. 取出4个作用域中存放的值</span><br><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"page"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"name"</span>, <span class="string">"request"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"name"</span>, <span class="string">"session"</span>);</span><br><span class="line">application.setAttribute(<span class="string">"name"</span>, <span class="string">"application"</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">按普通手段取值：</span><br><span class="line">&lt;%= pageContext.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%= request.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%= session.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line">&lt;%= application.getAttribute(<span class="string">"name"</span>)%&gt;</span><br><span class="line"></span><br><span class="line">使用EL表达式取出作用域中的值：</span><br><span class="line"><span class="variable">$&#123; pageScope.name &#125;</span></span><br><span class="line"><span class="variable">$&#123; requestScope.name &#125;</span></span><br><span class="line"><span class="variable">$&#123; sessionScope.name &#125;</span></span><br><span class="line"><span class="variable">$&#123; applicationScope.name &#125;</span></span><br><span class="line"></span><br><span class="line">2. 如果域中所存的是数组</span><br><span class="line">   &lt;%String [] a = &#123;<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>&#125;;</span><br><span class="line">   pageContext.setAttribute(<span class="string">"array"</span>, a); %&gt;</span><br><span class="line">   </span><br><span class="line">   使用EL表达式取出作用域中数组的值：</span><br><span class="line">   <span class="variable">$&#123;array[0] &#125;</span> , <span class="variable">$&#123;array[1] &#125;</span>,<span class="variable">$&#123;array[2] &#125;</span>,<span class="variable">$&#123;array[3] &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 如果域中存的是集合</span><br><span class="line">使用EL表达式取出作用域中集合的值：</span><br><span class="line"><span class="variable">$&#123;li[0] &#125;</span> , <span class="variable">$&#123;li[1] &#125;</span>,<span class="variable">$&#123;li[2] &#125;</span>,<span class="variable">$&#123;li[3] &#125;</span></span><br><span class="line"></span><br><span class="line">4. 取出Map集合的值</span><br><span class="line">&lt;br&gt;-------------Map数据----------------&lt;br&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">   Map map = new HashMap();</span><br><span class="line">   map.put(<span class="string">"name"</span>, <span class="string">"zhangsna"</span>);</span><br><span class="line">   map.put(<span class="string">"age"</span>,18);</span><br><span class="line">   map.put(<span class="string">"address"</span>,<span class="string">"北京.."</span>);</span><br><span class="line">   map.put(<span class="string">"address.aa"</span>,<span class="string">"深圳.."</span>);</span><br><span class="line">   pageContext.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">   %&gt;</span><br><span class="line">   </span><br><span class="line">   使用EL表达式取出作用域中Map的值：</span><br><span class="line">   <span class="variable">$&#123;map.name &#125;</span> , <span class="variable">$&#123;map.age &#125;</span> , <span class="variable">$&#123;map.address &#125;</span>  , <span class="variable">$&#123;map["address.aa"] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="取值细节"><a href="#取值细节" class="headerlink" title="取值细节"></a>取值细节</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.  从域中取值。  得先存值。</span><br><span class="line"></span><br><span class="line">  &lt;%  //pageContext.setAttribute(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">      session.setAttribute(<span class="string">"name"</span>, <span class="string">"lisi..."</span>);  %&gt;</span><br><span class="line">  </span><br><span class="line">   直接指定说了，到这个作用域里面去找这个name</span><br><span class="line">   <span class="variable">$&#123; pageScope.name &#125;</span> </span><br><span class="line"></span><br><span class="line">   //先从page里面找，没有去request找，去session，去application </span><br><span class="line">   <span class="variable">$&#123; name &#125;</span></span><br><span class="line"></span><br><span class="line">   指定从session中取值</span><br><span class="line">   <span class="variable">$&#123; sessionScope.name &#125;</span>  </span><br><span class="line"></span><br><span class="line">2. 取值方式</span><br><span class="line"></span><br><span class="line">- 如果这份值是有下标的，那么直接使用[]</span><br><span class="line">&lt;%String [] array = &#123;<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>&#125;</span><br><span class="line">session.setAttribute(<span class="string">"array"</span>,array);  %&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123; array[1] &#125;</span> --&gt; 这里array说的是attribute的name </span><br><span class="line"></span><br><span class="line">- 如果没有下标， 直接使用 .的方式去取</span><br><span class="line">&lt;%User user = new User(<span class="string">"zhangsan"</span>,18);</span><br><span class="line">session.setAttribute(<span class="string">"u"</span>, user);  %&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123; u.name &#125;</span>  , <span class="variable">$&#123; u.age &#125;</span> </span><br><span class="line"></span><br><span class="line">3. 一般使用EL表达式，用的比较多的，都是从一个对象中取出它的属性值，比如取出某一个学生的姓名。</span><br></pre></td></tr></table></figure><h3 id="EL表达式-的11个内置（隐式）对象"><a href="#EL表达式-的11个内置（隐式）对象" class="headerlink" title="EL表达式 的11个内置（隐式）对象"></a>EL表达式 的11个内置（隐式）对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">内置对象：已经存在，不用创建，可以直接获取成员变量或者属性</span><br><span class="line">用法：<span class="variable">$&#123; 对象名.成员 &#125;</span></span><br><span class="line"></span><br><span class="line">JSP相关对象</span><br><span class="line">- pageContext </span><br><span class="line"></span><br><span class="line">作用域相关对象（用的比较多）</span><br><span class="line">- pageScope</span><br><span class="line">- requestScope</span><br><span class="line">- sessionScope</span><br><span class="line">- applicationScope</span><br><span class="line"></span><br><span class="line">请求头信息相关对象</span><br><span class="line">- header</span><br><span class="line">- headerValues</span><br><span class="line"></span><br><span class="line">请求参数信息相关对象</span><br><span class="line">- param</span><br><span class="line">- paramValues</span><br><span class="line"></span><br><span class="line">Cookie</span><br><span class="line">- cookie</span><br><span class="line"></span><br><span class="line">全局初始化参数</span><br><span class="line">- initParam</span><br></pre></td></tr></table></figure><h1 id="三、-JSTL（标准标签库）"><a href="#三、-JSTL（标准标签库）" class="headerlink" title="三、 JSTL（标准标签库）"></a>三、 JSTL（标准标签库）</h1><ul><li>全称 ： JSP Standard Tag Library  ： jsp标准标签库</li><li>简化jsp的代码编写。 替换 &lt;%%&gt; 写法。 一般与EL表达式配合</li></ul><h2 id="JSTL使用"><a href="#JSTL使用" class="headerlink" title="JSTL使用"></a>JSTL使用</h2><ol><li>导入jar文件到工程的WebContent/Web-Inf/lib    jstl.jar和standard.jar</li><li>在jsp页面上，使用taglib 指令，来引入标签库</li><li>注意： 如果想支持 EL表达式，那么引入的标签库必须选择1.1的版本，1.0的版本不支持EL表达式。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="built_in">set</span>&gt;&lt;/c:<span class="built_in">set</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">""</span>&gt;&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:forEach&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1. c:<span class="built_in">set</span></span><br><span class="line">&lt;!-- 声明一个对象name， 对象的值 zhangsan , 存储到了page（默认） ， 指定是session --&gt;</span><br><span class="line">&lt;c:<span class="built_in">set</span> var=<span class="string">"name"</span> value=<span class="string">"zhangsan"</span> scope=<span class="string">"session"</span>&gt;&lt;/c:<span class="built_in">set</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;sessionScope.name &#125;</span></span><br><span class="line"></span><br><span class="line">2. c:<span class="keyword">if</span></span><br><span class="line"> 判断<span class="built_in">test</span>里面的表达式是否满足，如果满足，就执行c:<span class="keyword">if</span>标签中的输出 ， c:<span class="keyword">if</span> 是没有<span class="keyword">else</span>的。 </span><br><span class="line">&lt;c:<span class="built_in">set</span> var=<span class="string">"age"</span> value=<span class="string">"18"</span> &gt;&lt;/c:<span class="built_in">set</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123; age &gt; 26 &#125;</span>"</span>&gt;</span><br><span class="line">年龄大于了26岁...</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123; age &lt;= 26 &#125;</span>"</span>&gt;</span><br><span class="line">年龄小于了26岁...</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line">定义一个变量名 flag  去接收前面表达式的值，然后存在session域中</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"<span class="variable">$&#123; age &gt; 26 &#125;</span>"</span> var=<span class="string">"flag"</span> scope=<span class="string">"session"</span>&gt;</span><br><span class="line">年龄大于了26岁...</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. c:forEach</span><br><span class="line">从1 开始遍历到10 ，得到的结果 ，赋值给 i ,并且会存储到page域中， step , 增幅为2， </span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> var=<span class="string">"i"</span> step=<span class="string">"2"</span>&gt;</span><br><span class="line"><span class="variable">$&#123;i &#125;</span></span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">&lt;!-- items : 表示遍历哪一个对象，注意，这里必须写EL表达式。 </span><br><span class="line">var: 遍历出来的每一个元素用user 去接收。 --&gt;</span><br><span class="line">&lt;c:forEach var=<span class="string">"user"</span> items=<span class="string">"<span class="variable">$&#123;list &#125;</span>"</span>&gt;</span><br><span class="line"><span class="variable">$&#123;user.name &#125;</span> ----<span class="variable">$&#123;user.age &#125;</span></span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP，EL表达式，JSTL介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="EL" scheme="http://yoursite.com/tags/EL/"/>
    
      <category term="JSTL" scheme="http://yoursite.com/tags/JSTL/"/>
    
  </entry>
  
  <entry>
    <title>区块链技术的应用领域</title>
    <link href="http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8%E9%A2%86%E5%9F%9F/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:40:58.575Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h2 id="金融领域"><a href="#金融领域" class="headerlink" title="金融领域"></a>金融领域</h2><p>区块链在<strong>国际汇兑</strong>、<strong>信用证</strong>、<strong>股权登记</strong>和<strong>证券交易所</strong>等金融领域有着潜在的巨大应用价值。将区块链技术应用在金融行业中，能够省去第三方中介环节，实现<strong>点对点</strong>的直接对接，从而在大大降低成本的同时，快速完成交易支付。<br>比如Visa推出基于区块链技术的 Visa B2B Connect，它能为机构提供一种费用更低、更快速和安全的跨境支付方式来处理全球范围的企业对企业的交易。要知道传统的跨境支付需要等3-5天，并为此支付1-3%的交易费用。Visa 还联合 Coinbase 推出了首张比特币借记卡，<strong>花旗银行</strong>则在区块链上测试运行加密货币“<strong>花旗币</strong>”。</p><h2 id="物联网和物流领域"><a href="#物联网和物流领域" class="headerlink" title="物联网和物流领域"></a>物联网和物流领域</h2><p>区块链在物联网和物流领域也可以天然结合。通过区块链可以降低物流成本，追溯物品的生产和运送过程，并且提高供应链管理的效率。该领域被认为是区块链一个很有前景的应用方向。<br>区块链通过结点连接的散状网络分层结构，能够在整个网络中实现信息的全面传递，并能够检验信息的准确程度。这种特性一 定程度上提高了物联网交易的便利性和智能化。<strong>区块链</strong>+<strong>大数据</strong>的解决方案就利用了大数据的自动筛选过滤模式，在区块链中建立信用资源，可双重提高交易的安全性，并提高物联网交易便利程度。为智能物流模式应用节约时间成本。区块链结点具有十分自由的进出能力，可独立的参与或离开区块链体系，不对整个区块链体系有任何干扰。区块链 +大数据解决方案就利用了大数据的整合能力，促使物联网基础用户拓展更具有方向性，便于在智能物流的分散用户之间实现用户拓展。</p><h2 id="公共服务领域"><a href="#公共服务领域" class="headerlink" title="公共服务领域"></a>公共服务领域</h2><p>区块链在公共管理、能源、交通等领域都与民众的生产生活息息相关，但是这些领域的中心化特质也带来了一些问题，可以用区块链来改造。区块链提供的去中心化的完全分布式DNS服务通过网络中各个节点之间的点对点数据传输服务就能实现域名的查询和解析，可用于确保某个重要的基础设施的操作系统和固件没有被篡改，可以监控软件的状态和完整性，发现不良的篡改，并确保使用了物联网技术的系统所传输的数据没用经过篡改。</p><h2 id="数字版权领域"><a href="#数字版权领域" class="headerlink" title="数字版权领域"></a>数字版权领域</h2><p>通过区块链技术，可以对作品进行鉴权，证明文字、视频、音频等作品的存在，保证权属的真实、唯一性。作品在区块链上被确权后，后续交易都会进行实时记录，实现数字版权全生命周期管理，也可作为司法取证中的技术性保障。例如，美国纽约一家创业公司Mine Labs开发了一个基于区块链的元数据协议，这个名为Mediachain的系统利用IPFS文件系统，实现数字作品版权保护，主要是面向数字图片的版权保护应用。</p><h2 id="保险领域"><a href="#保险领域" class="headerlink" title="保险领域"></a>保险领域</h2><p>在保险理赔方面，保险机构负责资金归集、投资、理赔，往往管理和运营成本较高。通过智能合约的应用，既无需投保人申请，也无需保险公司批准，只要触发理赔条件，实现保单自动理赔。一个典型的应用案例就是LenderBot, 是 2016 年由区块链企业 Stratumn、德勤与支付服务商 Lemonway 合作推出，它允许人们通过 Facebook Messenger 的聊天功能，注册定制化的微保险产品， 为个人之间交换的高价值物品进行投保，而区块链在贷款合同中代替了第三方角色 。</p><h2 id="公益领域"><a href="#公益领域" class="headerlink" title="公益领域"></a>公益领域</h2><p>区块链上存储的数据，高可靠且不可篡改，天然适合用在社会公益场景。公益流程中的相关信息，如捐赠项目、募集明细、资金流向、受助人反馈等，均可以存放于区块链上，并且有条件地进行透明公开公示，方便社会监督。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>区块链的架构模型以及核心技术</title>
    <link href="http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%8F%8A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:41:40.596Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h2 id="一-架构模型"><a href="#一-架构模型" class="headerlink" title="一.架构模型"></a>一.架构模型</h2><p>一般说来，区块链系统由数据层、网络层、共识层、激励层、合约层，应用层组成。</p><ol><li><strong>数据层：</strong> 封装了底层数据区块以及相关的数据加密和时间戳等基础数据和基本算法。</li><li><strong>网络层：</strong> 则包括分布式组网机制、数据传播机制和数据验证机制等。</li><li><strong>共识层：</strong> 主要封装网络节点的各类共识算法。</li><li><strong>激励层：</strong> 将经济因素集成到区块链技术体系中来，主要包括经济激励的发行机制和分配机制等。</li><li><strong>合约层：</strong> 主要封装各类脚本、算法和智能合约，是区块链可编程特性的基础。</li><li><strong>应用层：</strong> 则封装了区块链的各种应用场景和案例。</li></ol><p><strong>区块链技术最具代表性的创新点：</strong></p><ol><li>基于时间戳的链式区块结构、分布式节点的共识机制。</li><li>基于共识算力的经济激励和灵活可编程的智能合约。</li></ol><h2 id="二-核心技术"><a href="#二-核心技术" class="headerlink" title="二.核心技术"></a>二.核心技术</h2><p> 1.<strong>分布式账本：</strong>分布式账本指的是交易记账由分布在不同地方的多个节点共同完成，而且每一个节点记录的是完整的账目，因此它们都可以参与监督交易合法性，同时也可以共同为其作证 。跟传统的分布式存储有所不同，区块链的分布式存储的独特性主要体现在两个方面：一是区块链每个节点都按照块链式结构存储完整的数据，传统分布式存储一般是将数据按照一定的规则分成多份进行存储。二是区块链每个节点存储都是独立的、地位等同的，依靠共识机制保证存储的一致性，而传统分布式存储一般是通过中心节点往其他备份节点同步数据。没有任何一个节点可以单独记录账本数据，从而避免了单一记账人被控制或者被贿赂而记假账的可能性。也由记账节点足够多，理论上讲除非所有的节点被破坏，否则账目就不会丢失，从而保证了账目数据的安全性。</p><p>2.<strong>非对称加密：</strong>存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的，只有在数据拥有者授权的情况下才能访问到，从而保证了数据的安全和个人的隐私。<br>3.<strong>共识机制</strong>就是所有记账节点之间怎么达成共识，去认定一个记录的有效性，这既是认定的手段，也是防止篡改的手段。区块链提出了四种不同的共识机制，适用于不同的应用场景，在效率和安全性之间取得平衡 。<br>区块链的共识机制具备“少数服从多数”以及“人人平等”的特点，其中“少数服从多数”并不完全指节点个数，也可以是计算能力、股权数或者其他的计算机可以比较的特征量。“人人平等”是当节点满足条件时，所有节点都有权优先提出共识结果、直接被其他节点认同后并最后有可能成为最终共识结果。以比特币为例，采用的是工作量证明，只有在控制了全网超过51%的记账节点的情况下，才有可能伪造出一条不存在的记录。当加入区块链的节点足够多的时候，这基本上不可能，从而杜绝了造假的可能。<br>4.<strong>智能合约：</strong>基于这些可信的不可篡改的数据，可以自动化的执行一些预先定义好的规则和条款。以保险为例，如果说每个人的信息（包括医疗信息和风险发生的信息）都是真实可信的，那就很容易的在一些标准化的保险产品中，去进行自动化的理赔。在保险公司的日常业务中，虽然交易不像银行和证券行业那样频繁，但是对可信数据的依赖是有增无减。因此，笔者认为利用区块链技术，从数据管理的角度切入，能够有效地帮助保险公司提高风险管理能力。具体来讲主要分投保人风险管理和保险公司的风险监督。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>区块链简单理解</title>
    <link href="http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/02/11/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:23:42.405Z</updated>
    
    <content type="html"><![CDATA[<p>对近年来很火的区块链的简单了解</p><a id="more"></a><h2 id="区块链是什么："><a href="#区块链是什么：" class="headerlink" title="区块链是什么："></a>区块链是什么：</h2><p>区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。区块链（Blockchain），是比特币的一个重要概念，它本质上是一个<strong>去中心化的数据库</strong>，同时作为比特币的底层技术，是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一批次比特币网络交易的信息，用于验证其信息的有效性（防伪）和生成下一个区块。</p><h2 id="起源："><a href="#起源：" class="headerlink" title="起源："></a>起源：</h2><p>区块链起源于比特币，2008年11月1日，一位自称<strong>中本聪</strong>(Satoshi Nakamoto)的人发表了《比特币:一种点对点的电子现金系统》，阐述了<strong>基于P2P网络技术、加密技术、时间戳技术、区块链技术等的电子现金系统的构架理念</strong>，这标志着比特币的诞生。两个月后理论步入实践，2009年1月3日第一个序号为0的创世区块诞生。几天后2009年1月9日出现序号为1的区块，并与序号为0的创世区块相连接形成了链，标志着区块链的诞生。<br>近年来，世界对比特币的态度起起落落，但作为比特币底层技术之一的区块链技术日益受到重视。在比特币形成过程中，区块是一个一个的存储单元，记录了一定时间内各个区块节点全部的交流信息。各个区块之间通过<strong>随机散列(也称哈希算法)</strong> 实现链接，后一个区块包含前一个区块的哈希值，随着信息交流的扩大，一个区块与一个区块相继接续，形成的结果就叫区块链 。</p><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><ul><li><strong>从科技层面来看：</strong> 区块链涉及数学、密码学、互联网和计算机编程等很多科学技术问题。</li><li><strong>从应用视角来看：</strong> 区块链是一个分布式的共享账本和数据库，具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点。这些特点保证了区块链的 <strong>“诚实”</strong> 与 <strong>“透明”</strong> ，为区块链创造信任奠定基础。而区块链丰富的应用场景，基本上都基于区块链能够解决信息不对称问题，实现多个主体之间的协作信任与一致行动。</li></ul><h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><ol><li><strong><em>公有区块链</em></strong>（Public Block Chains)：世界上任何个体或者团体都可以发送交易，且交易能够获得该区块链的有效确认，任何人都可以参与其共识过程。公有区块链是最早的区块链，也是应用最广泛的区块链，各大bitcoins系列的虚拟数字货币均基于公有区块链，世界上<strong>有且仅有一条</strong>该币种对应的区块链。</li><li><strong><em>行业区块链</em></strong>（Consortium Block Chains)：由某个群体<strong>内部指定</strong>多个预选的节点为记账人，每个块的生成由所有的预选节点共同决定（预选节点参与共识过程），其他接入节点可以参与交易，但不过问记账过程(本质上还是托管记账，只是变成分布式记账，预选节点的多少，如何决定每个块的记账者成为该区块链的主要风险点），其他任何人可以通过该区块链开放的API进行限定查询。</li><li><strong><em>私有区块链</em></strong>（Private Block Chains)：仅仅使用区块链的总账技术进行记账，可以是一个公司，也可以是个人，独享该区块链的写入权限，本链与其他的分布式存储方案没有太大区别。传统金融都是想实验尝试私有区块链，而公链的应用例如bitcoin已经工业化，私链的应用产品还在摸索当中。</li></ol><h2 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h2><ol><li>去中心化。区块链技术不依赖额外的第三方管理机构或硬件设施，没有中心管制，除了自成一体的区块链本身，通过分布式核算和存储，各个节点实现了信息自我验证、传递和管理。去中心化是区块链最突出最本质的特征。</li><li>开放性。区块链技术基础是<strong>开源的</strong>，除了交易各方的私有信息被加密外，区块链的数据对所有人开放，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。</li><li>独立性。基于协商一致的规范和协议(类似比特币采用的哈希算法等各种数学算法)，整个区块链系统不依赖其他第三方，所有节点能够在系统内自动安全地验证、交换数据，不需要任何人为的干预。</li><li>安全性。只要不能掌控全部数据节点的51%，就无法肆意操控修改网络数据，这使区块链本身变得相对安全，避免了主观人为的数据变更。</li><li>匿名性。除非有法律规范要求，单从技术上来讲，各区块节点的身份信息不需要公开或验证，信息传递可以<strong>匿名进行</strong>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对近年来很火的区块链的简单了解&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>比特币的价格是怎么算出来的</title>
    <link href="http://yoursite.com/2020/02/11/%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E4%BB%B7%E6%A0%BC%E6%98%AF%E6%80%8E%E4%B9%88%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84/"/>
    <id>http://yoursite.com/2020/02/11/%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E4%BB%B7%E6%A0%BC%E6%98%AF%E6%80%8E%E4%B9%88%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:41:14.474Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h2 id="首先了解一下拍卖"><a href="#首先了解一下拍卖" class="headerlink" title="首先了解一下拍卖"></a>首先了解一下拍卖</h2><ul><li><strong>英式拍卖：</strong> 如果拍卖方（卖方）要卖一个商品，那么买方则通过集体竞价的方式进行拍卖，价高者得，最后和卖方成交的一定只有一个买家，而这个买家一定是出价最高的那位。</li><li><strong>荷兰式拍卖：</strong> 假如有一个买家想要买一个商品，但是卖方有很多，那么卖方递减报出新的价位，最终和买方成交的一定是卖价最低的那位。</li></ul><h2 id="实际定价方式"><a href="#实际定价方式" class="headerlink" title="实际定价方式"></a>实际定价方式</h2><p>在交易所看到的一排排红色的数字和一排排绿色的数字其实就是许多的买方和许多的卖方不断报出的<strong>买进价</strong>和<strong>卖出价</strong>，价格随供求变化而不断变动。买者和卖者彼此竞争，<strong>双向拍卖</strong>，买者对想要买进的出价，通过竞争以最低价买入;卖者也互相竞争，试图以最高价格出售，然而最新成交价一定是买卖双方达成一致的那个价格。买卖双方不断成交，最新一笔的成交价就是我们看到的不断变化的价格，这就是为什么价格在一直变化的原因。报价后面的数量，即代表当前的买方或者卖方想要购买或者卖出的币的数量。买卖一旦成交，则不得反悔。在未成交以前，也可以撤单，撤单程序与买卖委托的过程基本相同。</p><h2 id="限价，市价，止盈止损"><a href="#限价，市价，止盈止损" class="headerlink" title="限价，市价，止盈止损"></a>限价，市价，止盈止损</h2><ul><li>限价：是<strong>自己设定</strong>价格进行挂单，需价格波动到设定价格并有对手愿意交易才可以成交。</li><li>市价：市价是以<strong>当前最新</strong>成交价挂单，一般马上成交。</li><li>止盈止损：止盈止损即是<strong>带有预期</strong>的未来买入或者卖出行为，比如当价格跌破某一价位时进行止损（你预期跌破此价格可能还会继续跌），或者当价格突破某一价位时进行买入（你预期价格一旦突破该价位时将会继续上涨）。</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果你是买方，想要<strong>尽快</strong>购入比特币，当然是设置买入价格与当前最低卖出价格一致，这样双方就可以达成交易了，想要尽快卖出比特币，那就设置卖出价格与当前最高买入价格一致。但是市场上的人并不是都急切的想要卖出或者买入，会带有预期的进行买入卖出报价。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>比特币的两种交易方式</title>
    <link href="http://yoursite.com/2020/02/11/%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BA%A4%E6%98%93%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/11/%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BA%A4%E6%98%93%E6%96%B9%E5%BC%8F/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:30:47.665Z</updated>
    
    <content type="html"><![CDATA[<p>比特币的交易有很多种，本文了解一下</p><a id="more"></a><h2 id="比特币交易的几种种方式："><a href="#比特币交易的几种种方式：" class="headerlink" title="比特币交易的几种种方式："></a>比特币交易的几种种方式：</h2><p><img src="https://img-blog.csdnimg.cn/20200204170527575.png" alt="在这里插入图片描述"></p><ol><li><strong>场外交易：</strong> 也称为<strong>法币交易</strong>，法币就是<strong>法定货币</strong>，人民币就是我们国家的法定货币，顾名思义，法币交易就是由法币（人民币）直接与比特币（数字货币）进行交易的行为（购买/出售),可以简单理解为网购。</li><li><strong>场内交易：</strong> 也称之为<strong>币币交易</strong>，就是用一种币交易兑换另一种币。</li><li><strong>杠杆交易：</strong> 利用小额的资金来进行数倍于原始金额的投资。以期望获取相对投资标的物波动的数倍收益率，抑或亏损。由于保证金（该笔小额资金）的增减不以标的资产的波动比例来运动，<strong>风险很高</strong>。不推荐。</li><li><strong>合约交易：</strong> 合约交易是指交易双方，在交易所通过买卖合约，并根据约定在未来某一特定时间和地点，以特定价格买卖规定数量商品的行为。合约交易是在现货远期合约交易基础上发展起来的，在交易所内买卖标准化合约的一种新型交易方式。</li></ol><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ol><li>法币交易很耗时间，即使交易双方操作熟练，但是还是不排除人为因素造成交易时间拖长，不利于双方观察局势，很有可能在分分钟内错过行情。</li><li>币币交易可以在极短时间内成交（按下买入键的瞬间与对手成交）且支持购买的币种更多。</li></ol><p>，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比特币的交易有很多种，本文了解一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>火币网--币币交易图解</title>
    <link href="http://yoursite.com/2020/02/11/%E7%81%AB%E5%B8%81%E7%BD%91-%E5%B8%81%E5%B8%81%E4%BA%A4%E6%98%93%E5%9B%BE%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/02/11/%E7%81%AB%E5%B8%81%E7%BD%91-%E5%B8%81%E5%B8%81%E4%BA%A4%E6%98%93%E5%9B%BE%E8%A7%A3/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:35:25.804Z</updated>
    
    <content type="html"><![CDATA[<p>如何在火币网上执行币币交易</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200205111557755.png" alt="在这里插入图片描述"></p><ul><li><p>BTC/USDT：BTC对USDT的交易对，相当于平均1个BTC当前需要9211.76个USDT来购买，后面的64574.43CNY是说9211.76个USDT约等于64574.43人民币。</p></li><li><p>涨幅+0.01%是今天此时此刻比特币的价格相对于昨天的这个时候价格涨了0.01%，如果是红色的-0.01%就代表跌了0.01%。</p></li><li><p>高9320.00 低9100.00是<strong>过去24小时</strong>最高9320.00USDT最低9100.00USDT。</p></li><li><p>24H量：是过去24小时火币网交易了28878个比特币。这只是在火币网交易的数量。<br><img src="https://img-blog.csdnimg.cn/2020020511252911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>上面一排时间是，选择显示这个时间段的数据，比如我选择的是1min，那么k线图中每一个红色或者绿色的柱就代表这一分钟内的走势。</p></li><li><p>时间下面的一排：11：24这个时间点的开盘价，最高价，最低价，收盘价，成交量。</p></li><li><p>MA均线：<strong>（MA）理论是股市最常见的一种技术分析方法，它对股市操作具有神奇的指导作用。</strong></p></li><li><p>绿色柱状：柱底代表开盘价，柱顶代表收盘价，红色则相反。</p></li><li><p>柱上下的细线：上影线，下影线，分别代表在这一分钟内的最高价和最低价。</p></li><li><p>图中标有今日最高，和今日最低。严谨理解为：从今日凌晨到目前为止的最高价与最低价。</p><h2 id="均线分析方法："><a href="#均线分析方法：" class="headerlink" title="均线分析方法："></a>均线分析方法：</h2></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在火币网上执行币币交易&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>数字货币的种类</title>
    <link href="http://yoursite.com/2020/02/11/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E7%9A%84%E7%A7%8D%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/02/11/%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E7%9A%84%E7%A7%8D%E7%B1%BB/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:34:16.408Z</updated>
    
    <content type="html"><![CDATA[<p>当前的数字货币大致有以下几种。</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200204160645330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>BTC：</strong> 比特币</li><li><strong>ETH：</strong> 以太币</li><li><strong>USDT：</strong> 泰达币（与同数量的美元是等值的）</li><li><strong>EOS：</strong> 为商用分布式应用设计的一款区块链操作系统。EOS是引入的一种新的区块链架构，旨在实现分布式应用的性能扩展。注意，它并不是像比特币和以太坊那样的货币，而是基于EOS软件项目之上发布的代币，被称为区块链3.0 。</li><li><strong>XRP：</strong> 瑞波币。它是基于Ripple协议的虚拟货币，主要功能有二：1.防止恶意攻击；2.桥梁货币。</li><li><strong>LTC：</strong> 莱特币。<img src="https://img-blog.csdnimg.cn/20200204161448813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>HT：</strong> 火币<br><img src="https://img-blog.csdnimg.cn/20200204161631662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>HUSD：</strong> 稳定币<img src="https://img-blog.csdnimg.cn/20200204162140418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li><strong>BCH：</strong><img src="https://img-blog.csdnimg.cn/20200204162243770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前的数字货币大致有以下几种。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>股票基本术语</title>
    <link href="http://yoursite.com/2020/02/11/%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/"/>
    <id>http://yoursite.com/2020/02/11/%E8%82%A1%E7%A5%A8%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/</id>
    <published>2020-02-11T02:19:20.000Z</published>
    <updated>2020-03-08T02:37:52.278Z</updated>
    
    <content type="html"><![CDATA[<p>股票基本术语了解。</p><a id="more"></a><h1 id="A-B-H-蓝筹股-amp-债券-amp-基金"><a href="#A-B-H-蓝筹股-amp-债券-amp-基金" class="headerlink" title="A/B/H/蓝筹股&amp;债券&amp;基金"></a>A/B/H/蓝筹股&amp;债券&amp;基金</h1><ul><li><strong>A股：</strong> 人民币普通股票，由我国境内的公司发行，供境内机构、组织、或个人(不含台、港、澳投资者)以人民币认购和交易的普通股票。</li><li><strong>B股：</strong> 人民币特种股票，以人民币标明面值，<strong>以外币认购和买卖</strong>，在境内(上海、深圳)证券交易所上市交易的。B股公司的注册地和上市地都在境内。</li><li><strong>H股：</strong> 港股：即注册地在内地、上市地在香港的<strong>外资股。</strong> 在香港上市外资股就叫做H股，纽约和新加坡上市的股票分别叫做N股和S股。</li><li><strong>蓝筹股：</strong> 多指长期稳定增长的、大型的、传统工业股及金融股。“蓝筹”一词源于西方赌场，在西方赌场中，有三种颜色的筹码（蓝，红，白）、其中蓝色筹码最为值钱。</li><li><strong>债券：</strong> 政府、企业、银行等债务人为筹集资金,按照法定程序发行并向债权人承诺于指定日期还本付息的有价证券。</li><li><strong>开放式基金：</strong>（Open-end Funds）又称共同基金,是指基金发起人在设立基金时，基金单位或者股份总规模不固定，可视投资者的需求，随时向投资者出售基金单位或者股份，并可以应投资者的要求赎回发行在外的基金单位或者股份的一种基金运作方式。投资者既可以通过基金销售机构买基金使得基金资产和规模由此相应的增加，也可以将所持有的基金份额卖给基金并收回现金使得基金资产和规模相应的减少。</li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li><p><strong>原始股：</strong> 是公司在上市之前发行的股票。在中国股市初期，在股票一级市场上以发行价向社会公开发行的企业股票。</p></li><li><p><strong>概念股：</strong> 是指具有某种特别内涵的股票，与业绩股相对而言的。业绩股需要有良好的业绩支撑。而概念股是依靠某一种题材比如资产重组概念，三通概念等支撑价格。而这一内涵通常会被当作一种选股和炒作题材，成为股市的热点。概念股是股市术语，作为一种选股的方式。相较于绩优股必须有良好的营运业绩所支撑，概念股只是以依靠相同话题，将同类型的股票列入选股标的的一种组合。由于概念股的广告效应，因此不具有任何获利的保证。</p></li><li><p><strong>权重股：</strong>（weighted stock）就是总股本巨大的上市公司股票，它的股票总数占股票市场股票总数的比重很大，权重就很大，权重股的涨跌对股票指数的影响很大。</p></li><li><p><strong>借壳上市：</strong> 是指一家私人公司（Private Company）通过把资产注入一家市值较低的已上市公司（壳，Shell），得到该公司一定程度的控股权，利用其上市公司地位，使母公司的资产得以上市。通常该壳公司会被改名。</p></li><li><p><strong>交易时间：</strong> 大多数股票的交易时间是四小时，分两个时段：周一至周五上午9：30-11：30和下午13：00至15：00</p></li><li><p><strong>交易费用：</strong> 股票的交易费用通常包括印花税，佣金，过户费，其他费用等。</p></li><li><p><strong>总市值:</strong> 是指在某特定时间内总股本数乘以当时股价得出的股票总价值。</p></li><li><p><strong>流通市值:</strong> 在某特定时间内当时可交易的流通股股数乘以当时股价得出的流通股票总价值。</p></li><li><p><strong>总股本：</strong> 包括新股发行前的股份和新发行的股份的数量的总和。</p></li><li><p><strong>市盈率：</strong> 由股价除以年度每股盈余(EPS)得出(以公司市值除以年度股东应占溢利亦可得出相同结果)。用来<strong>评估股价水平是否合理</strong>的指标之一。</p></li><li><p><strong>市净率：</strong> 每股股价与每股净资产的比率。市净率可用于<strong>投资分析</strong>，一般来说市净率较低的股票，投资价值较高，相反，则投资价值较低。</p></li><li><p><strong>基准日：</strong> 就是因股票分红或配股，而进行股价调整的那天。相应的，在这天，红利和红股会配到投资者帐号里。而在基准日前，还有股权登记日。在股权登记日前买入该股票的投资者，享有分红或配股的权利。红利和红股会在基准日打到帐号里。</p></li><li><p><strong>大盘：</strong> 指沪市的“上证综合指数”和深市的“深证成份股指数”的股票。大盘指数是运用统计学中的指数方法编制而成的，反映股市<strong>总体价格</strong>或<strong>某类股价</strong>变动和走势的指标。</p></li><li><p><strong>个股：</strong> 是一种无偿还期限的有价证券，按股票持有者可分为国家股、法人股、个人股三种。个人股（individual stock）投资资金来自个人，可以自由上市流通。</p></li><li><p><strong>涨跌幅</strong>=(现价-上一个交易日收盘价）/上一个交易日收盘价*100%</p></li><li><p><strong>委差</strong> = 委买手数－委卖手数。</p></li><li><p><strong>委比</strong> = (委买手数-委卖手数)/(委买手数+委卖手数)×100%</p></li><li><p><strong>换手率：</strong> 也称“周转率”，指在一定时间内市场中股票转手买卖的频率，是反映股票流通性强弱的指标之一。成交量/股票总流通量×100%</p></li><li><p><strong>成交额：</strong> 某只股票在一定时间内成交的股票总金额。</p></li><li><p><strong>平均成交量：</strong> 每笔交易的平均成交量，成交量/成交笔数。</p></li><li><p><strong>成交量：</strong> 包括某只股票 当天的成交股数、成交金额、换手率；狭义的也是最常用的是仅指成交股数/手数(1手=100股)；通常人们说的大盘成交量指的是成交金额。</p></li><li><p><strong>仓位：</strong> 是指投资者买入股票所耗资金占资金总量的比例。当一个投资者的所有资金都已买入股票时就称为<strong>满仓</strong>，若不持有任何股票就称为<strong>空仓</strong>。</p></li></ul><h1 id="股票操作术语"><a href="#股票操作术语" class="headerlink" title="股票操作术语"></a>股票操作术语</h1><h2 id="内盘-amp-外盘"><a href="#内盘-amp-外盘" class="headerlink" title="内盘&amp;外盘"></a>内盘&amp;外盘</h2><ul><li>内盘（S）：以买入价成交的交易，成交数量统计后加入内盘。</li><li>外盘（B）：以卖出价成交的交易。成交数量统计后加入外盘。</li><li>内盘，外盘这两个数据大体可以<strong>用来判断买卖力量的强弱</strong>。若外盘数量大于内盘，则表现买方力量较强，若内盘数量大于外盘则说明卖方力量较强。</li></ul><h2 id="洗盘-amp-盯盘"><a href="#洗盘-amp-盯盘" class="headerlink" title="洗盘&amp;盯盘"></a>洗盘&amp;盯盘</h2><ul><li>洗盘：投机者先把股价大幅度杀低，使大批小额股票投资者(<strong>散户</strong>)产生恐慌而抛售股票，然后再把股价抬高，以便乘机渔利。</li><li>盯盘：俗称看盘，是股票投资者主要的日常工作。股票市场每时每刻都在变化，股票投资者尤其是短期投资者要掌握股票市场的动向，就要观察分析股市行情的变化，即要学会盯盘。</li></ul><h2 id="做多-amp-做空"><a href="#做多-amp-做空" class="headerlink" title="做多&amp;做空"></a>做多&amp;做空</h2><ul><li><strong>做多：</strong> 指的是多仓，也可以叫利多，买入某种货币，看涨。</li><li><strong>做空：</strong> 指的是卖仓，也可以叫利空，卖出某种货币，看跌。</li></ul><h2 id="多头-amp-空头"><a href="#多头-amp-空头" class="headerlink" title="多头&amp;空头"></a>多头&amp;空头</h2><ul><li><strong>多头：</strong> 指投资者对股市看好，预计股价将会看涨，于是趁低价时买进股票，待股票上涨至某一价位时再卖出，以获取差额收益。</li><li><strong>空头：</strong> 空头是投资者和股票商认为现时股价虽然较高，但对股市前景看坏，预计股价将会下跌，于是把借来的股票或者是原有持仓及时卖出（<strong>补空</strong>），待股价跌至某一价位时再买进，以获取差额收益。</li></ul><h2 id="涨停-amp-跌停"><a href="#涨停-amp-跌停" class="headerlink" title="涨停&amp;跌停"></a>涨停&amp;跌停</h2><ul><li>涨跌停板：是证券管理部门为了<strong>防止过度的投机</strong>而采取的一种措施，是指一只个股每天的最大涨跌幅度不能超过前一交易日的百分比。普通的股票最大涨跌幅为前一交易日的10%。<strong>新股上市首日不设涨跌幅限制</strong>。</li></ul><h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p> 熔断机制（Circuit Breaker），也叫自动停盘机制，是指当股指波幅达到某设定条件（熔断点）时，交易所为控制风险采取的暂停交易措施，<strong>不同于涨跌停板</strong>；例如，新股上市首日的规定：</p><ul><li>深交所：新股首日盘中成交价较开盘价首次上涨或下跌达到或超过10%即暂停交易，新股首日换手率超50%触发暂停交易。</li><li>上交所：新股首日盘中成交价较开盘价首次上涨或下跌达到10%暂停交易30分钟。达到20%，停牌到14时55分，首日换手率超80%触发暂停交易。</li></ul><h2 id="回档-amp-反弹"><a href="#回档-amp-反弹" class="headerlink" title="回档&amp;反弹"></a>回档&amp;反弹</h2><ul><li>回档：股价呈不断上涨趋势，终因股价上涨速度过快而反转回跌到某一价位，这一调整现象称为回档。一般来说，股票的回档幅度要比上涨幅度小，通常是反转回跌到前一次上涨幅度的三分之一左右时又恢复原来上涨趋势。</li><li>反弹：股价呈不断下跌趋势，终因股价下跌速度过快而反转回升到某一价位的调整现象称为反弹。一般来说，股票的反弹幅度要比下跌幅度小，通常是反弹到前一次下跌幅度的三分之一左右时，又恢复原来的下跌趋势。</li></ul><h2 id="跳空-amp-补空"><a href="#跳空-amp-补空" class="headerlink" title="跳空&amp;补空"></a>跳空&amp;补空</h2><ul><li>跳空：指受强烈利多或利空消息刺激，股价开始大幅度跳动。跳空通常在股价大变动的开始或结束前出现。</li><li>补空：是空头买回以前卖出的股票的行为。</li></ul><h2 id="阻力线-amp-支撑线"><a href="#阻力线-amp-支撑线" class="headerlink" title="阻力线&amp;支撑线"></a>阻力线&amp;支撑线</h2><ul><li>阻力线：股市受利多信息的影响，股价上涨至某一价格时，做多头的认为有利可图，但实际却有大量卖出，使股价至此停止上升，甚至出现回跌。股市上一般将这种遇到阻力时的价位称为关卡，股价上升时的关卡称为阻力线。<strong>（大量卖出抑制了价格继续攀升）</strong></li><li>支撑线：股市受利空信息的影响，股价跌至某一价位时，做空头的认为有利可图，大量买进股票，使股价不再下跌，甚至出现回升趋势。股价下跌时的关卡称为支撑线。<strong>（大量买入支撑起股价，由跌转升）</strong></li></ul><h2 id="金叉-amp-死叉"><a href="#金叉-amp-死叉" class="headerlink" title="金叉&amp;死叉"></a>金叉&amp;死叉</h2><ul><li>黄金交叉：指短期移动平均线向上穿过中期移动平均线或短期、中期移动平均线同时向上穿过长期移动平均线的走势图形，表示股价将继续上升。</li><li>死亡交叉(死叉)：指下降中的短期移动平均线由上而下穿过下降的长期移动平均线，这个时候支撑线被向下跌破，表示股价将继续下落。<br><img src="https://img-blog.csdnimg.cn/20200206150617607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ul><li>在股票名称前冠以“ST”的股票表示该上市公司最近两年连续亏损，或亏损一年，但净资产跌破面值、公司经营过程中出现重大违法行为等情况之一，交易所对该公司股票交易进行特别处理。股票交易日涨跌幅限制5%。</li><li><strong>F10：</strong> 股票非行情类的基本面资料统称为股票F10。在各种金融行情终端软件中，用户通过键盘上的F10快捷键，可迅速查看上市公司的非行情信息，诸如：公司概况、财务数据、公司公告、公司新闻、经营分析等等信息数据。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;股票基本术语了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链+比特币" scheme="http://yoursite.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE-%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
    
      <category term="区块链，比特币" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%EF%BC%8C%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>客户端会话技术：Cookie</title>
    <link href="http://yoursite.com/2020/02/09/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%EF%BC%9ACookie/"/>
    <id>http://yoursite.com/2020/02/09/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%EF%BC%9ACookie/</id>
    <published>2020-02-09T05:01:53.000Z</published>
    <updated>2020-03-07T07:54:01.144Z</updated>
    
    <content type="html"><![CDATA[<p>类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由客户端计算机暂时或永久保存的信息。</p><a id="more"></a><h2 id="Cookie概述"><a href="#Cookie概述" class="headerlink" title="Cookie概述"></a>Cookie概述</h2><ul><li><strong>概述：</strong> 一份小数据， 是服务器给客户端，并且存储在客户端上的一份小数据</li><li><strong>应用场景：</strong> 自动登录、浏览记录、购物车。</li><li><strong>为什么要有这个Cookie：</strong>  http的请求是无状态。 客户端与服务器在通讯的时候，是无状态的，其实就是客户端在第二次来访的时候，服务器根本就不知道这个客户端以前有没有来访问过。 为了更好的用户体验，更好的交互 <strong>[自动登录]</strong>，其实从公司层面讲，就是为了更好的收集用户习惯 <strong>[大数据]</strong>。</li></ul><h2 id="如何使用Cookie"><a href="#如何使用Cookie" class="headerlink" title="如何使用Cookie"></a>如何使用Cookie</h2><h3 id="发送Cookie给客户端"><a href="#发送Cookie给客户端" class="headerlink" title="发送Cookie给客户端"></a>发送Cookie给客户端</h3><ol><li>在响应的时候，添加cookie</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = new Cookie(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line"></span><br><span class="line">//给响应，添加一个cookie</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><ol start="2"><li>客户端收到的信息里面，响应头中多了一个字段 Set-Cookie</li></ol><p><img src="https://img-blog.csdnimg.cn/20200228143218378.png" alt="在这里插入图片描述"></p><h3 id="获取客户端带过来的Cookie"><a href="#获取客户端带过来的Cookie" class="headerlink" title="获取客户端带过来的Cookie"></a>获取客户端带过来的Cookie</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//获取客户端带过来的cookie</span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span>(cookies != null)&#123;</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">String cookieName = c.getName();</span><br><span class="line">String cookieValue = c.getValue();</span><br><span class="line">System.out.println(cookieName + <span class="string">" = "</span>+ cookieValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//关闭浏览器后，cookie就没有了。 ---&gt; 针对没有设置cookie的有效期。</span><br><span class="line">//expiry： 有效 以秒计算。</span><br><span class="line">//正值： 表示 在这个数字过后，cookie将会失效。</span><br><span class="line">//负值： 关闭浏览器，那么cookie就失效， 默认值是 -1</span><br><span class="line">cookie.setMaxAge(60 * 60 * 24 * 7);</span><br><span class="line"></span><br><span class="line">//赋值新的值</span><br><span class="line">cookie.setValue(newValue);</span><br><span class="line"></span><br><span class="line">//用于指定只有请求了指定的域名，才会带上该cookie</span><br><span class="line">cookie.setDomain(<span class="string">".itheima.com"</span>);</span><br><span class="line"></span><br><span class="line">//只有访问该域名下的cookieDemo的这个路径地址才会带cookie</span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo"</span>);</span><br></pre></td></tr></table></figure><h2 id="典型案例："><a href="#典型案例：" class="headerlink" title="典型案例："></a>典型案例：</h2><h3 id="显示最近访问的时间"><a href="#显示最近访问的时间" class="headerlink" title="显示最近访问的时间"></a>显示最近访问的时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1. 判断账号是否正确</span><br><span class="line">2. 如果正确，则获取cookie。 但是得到的cookie是一个数组， 我们要从数组里面找到我们想要的对象。</span><br><span class="line">3. 如果找到的对象为空，表明是第一次登录。那么要添加cookie</span><br><span class="line">4. 如果找到的对象不为空， 表明不是第一次登录。 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">//获取cookie last-name --- &gt;</span><br><span class="line">Cookie [] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">//从数组里面找出我们想要的cookie</span><br><span class="line">Cookie cookie = CookieUtil.findCookie(cookies, <span class="string">"last"</span>);</span><br><span class="line"></span><br><span class="line">//是第一次登录，没有cookie</span><br><span class="line"><span class="keyword">if</span>(cookie == null)&#123;</span><br><span class="line"></span><br><span class="line">Cookie c = new Cookie(<span class="string">"last"</span>, System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">c.setMaxAge(60*60); //一个小时</span><br><span class="line">response.addCookie(c);</span><br><span class="line"></span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//1. 去以前的cookie第二次登录，有cookie</span><br><span class="line">long lastVisitTime = Long.parseLong(cookie.getValue());</span><br><span class="line"></span><br><span class="line">//2. 输出到界面，</span><br><span class="line">response.getWriter().write(<span class="string">"欢迎您, "</span>+userName +<span class="string">",上次来访时间是："</span>+new Date(lastVisitTime));</span><br><span class="line"></span><br><span class="line">//3. 重置登录的时间</span><br><span class="line">cookie.setValue(System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">response.getWriter().write(<span class="string">"登陆失败 "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示商品浏览记录"><a href="#显示商品浏览记录" class="headerlink" title="显示商品浏览记录"></a>显示商品浏览记录</h3><p><img src="https://img-blog.csdnimg.cn/20200228173445822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>jsp</strong><br>Java Server Pager —&gt; 最终会翻译成一个类， 就是一个Servlet</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jsp中写java代码：</span><br><span class="line">&lt;%</span><br><span class="line">只能写java代码</span><br><span class="line">%&gt;</span><br><span class="line">定义全局变量:</span><br><span class="line">&lt;%! int a = 99; %&gt;</span><br><span class="line"></span><br><span class="line">定义局部变量:</span><br><span class="line">&lt;% int b = 999; %&gt;</span><br><span class="line"></span><br><span class="line">在jsp页面上，显示 a 和 b的值:</span><br><span class="line">&lt;%=a %&gt; </span><br><span class="line">&lt;%=b %&gt;</span><br></pre></td></tr></table></figure><p><strong>删除浏览记录</strong><br><img src="https://img-blog.csdnimg.cn/2020022818005011.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>清除浏览记录</strong></p><ul><li>其实就是清除Cookie， 删除cookie是没有什么delete方法的。只有设置maxAge 为0 。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = new Cookie(<span class="string">"history"</span>,<span class="string">""</span>);</span><br><span class="line">cookie.setMaxAge(0); //设置立即删除</span><br><span class="line">cookie.setPath(<span class="string">"/CookieDemo02"</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.服务器给客户端发送过来的一小份数据，并且存放在客户端上。</p><p>2.获取cookie， 添加cookie</p><pre><code>request.getCookie();response.addCookie();</code></pre><p>3.Cookie分类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">会话Cookie</span><br><span class="line">默认情况下，关闭了浏览器，那么cookie就会消失。</span><br><span class="line"></span><br><span class="line">持久Cookie</span><br><span class="line">在一定时间内，都有效，并且会保存在客户端上。 </span><br><span class="line">cookie.setMaxAge(0); //设置立即删除</span><br><span class="line">cookie.setMaxAge(100); //100 秒</span><br></pre></td></tr></table></figure><p>4.Cookie的安全问题。<br>由于Cookie会保存在客户端上，所以有安全隐患问题。  还有一个问题， Cookie的大小与个数有限制。 为了解决这个问题 —&gt; <strong>Session .</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由客户端计算机暂时或永久保存的信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>服务器端会话技术：Session</title>
    <link href="http://yoursite.com/2020/02/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%EF%BC%9ASession/"/>
    <id>http://yoursite.com/2020/02/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%EF%BC%9ASession/</id>
    <published>2020-02-09T05:01:53.000Z</published>
    <updated>2020-03-07T07:52:52.180Z</updated>
    
    <content type="html"><![CDATA[<p>Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。他是用来解决Cookie带来的安全问题。</p><a id="more"></a><h2 id="一、Session概述"><a href="#一、Session概述" class="headerlink" title="一、Session概述"></a>一、Session概述</h2><ul><li>会话 ， Session是基于Cookie的一种会话机制。 </li><li>Cookie是服务器返回一小份数据给客户端。并且存放在客户端上。 </li><li>Session是，数据存放在服务器端。</li></ul><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//得到会话ID</span><br><span class="line">String id = session.getId();</span><br><span class="line"></span><br><span class="line">//存值</span><br><span class="line">session.setAttribute(name, value);</span><br><span class="line"></span><br><span class="line">//取值</span><br><span class="line">session.getAttribute(name);</span><br><span class="line"></span><br><span class="line">//移除值</span><br><span class="line">session.removeAttribute(name);</span><br></pre></td></tr></table></figure><h2 id="三、Session的创建与销毁。"><a href="#三、Session的创建与销毁。" class="headerlink" title="三、Session的创建与销毁。"></a>三、Session的创建与销毁。</h2><ul><li>创建<br>如果有在servlet里面调用了 request.getSession()</li><li>销毁<br>session 是存放在服务器的内存中的一份数据。 当然可以持久化. Redis . 即使关了浏览器，session也不会销毁。</li></ul><ol><li>关闭服务器</li><li>session会话时间过期。 有效期过了，默认有效期： 30分钟。</li></ol><h2 id="四、移除Session中的元素"><a href="#四、移除Session中的元素" class="headerlink" title="四、移除Session中的元素"></a>四、移除Session中的元素</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//强制干掉会话，里面存放的任何数据就都没有了。</span><br><span class="line">session.invalidate();</span><br><span class="line"></span><br><span class="line">//从session中移除某一个数据</span><br><span class="line">session.removeAttribute(<span class="string">"cart"</span>);</span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li>Session： 也是基于cookie的一种会话技术，  数据存放存放在服务器端。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">会在cookie里面添加一个字段 JSESSIONID . 是tomcat服务器生成。 </span><br><span class="line">setAttribute 存数据</span><br><span class="line">getAttribute 取数据</span><br><span class="line">removeAttribute  移除数据</span><br><span class="line">getSessionId();  获取会话id</span><br><span class="line">invalidate() 强制让会话失效。</span><br></pre></td></tr></table></figure><ul><li>创建和销毁<br>  调用<strong>request.getSesion</strong>创建<br>   服务器关闭 ， 会话超时（30分）</li></ul><ul><li>setAttribute 存放的值， 在浏览器关闭后，依然不会丢失！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。他是用来解决Cookie带来的安全问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Http协议&amp;C/S通讯抓包</title>
    <link href="http://yoursite.com/2020/02/08/Http%E5%8D%8F%E8%AE%AE-C-S%E9%80%9A%E8%AE%AF%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2020/02/08/Http%E5%8D%8F%E8%AE%AE-C-S%E9%80%9A%E8%AE%AF%E6%8A%93%E5%8C%85/</id>
    <published>2020-02-08T05:01:53.000Z</published>
    <updated>2020-03-07T07:40:10.565Z</updated>
    
    <content type="html"><![CDATA[<p>http协议：针对网络上的客户端 与 服务器端在执行http请求的时候，遵守的一种规范。 规定了客户端在访问服务器端的时候,服务器端返回数据的时候，要带上什么东西。</p><a id="more"></a><h1 id="一、Http协议"><a href="#一、Http协议" class="headerlink" title="一、Http协议"></a>一、Http协议</h1><ul><li>什么是协议？<br>双方在交互、通讯的时候， 遵守的一种规范、规则。</li><li>http协议概述<br>针对网络上的客户端 与 服务器端在执行http请求的时候，遵守的一种规范。 其实就是规定了客户端在访问服务器端的时候，要带上哪些东西， 服务器端返回数据的时候，也要带上什么东西。 </li><li>版本<br> 1.0：请求数据，服务器返回后， 将会断开连接。<br> 1.1：请求数据，服务器返回后， 连接还会保持着。 除非服务器 | 客户端 关掉。 有一定的时间限制，如果都空着这个连接，那么后面会自己断掉。</li></ul><h1 id="二、演示客户端-如何-与服务器端通讯。"><a href="#二、演示客户端-如何-与服务器端通讯。" class="headerlink" title="二、演示客户端 如何 与服务器端通讯。"></a>二、演示客户端 如何 与服务器端通讯。</h1><p>问题： 在地址栏中键入网络地址 回车  或者是平常注册的时候，点击了注册按钮 ， 浏览器都能显示出来一些东西。那么背地里到底浏览器和服务器是怎么通讯。 它们都传输了哪些数据？</p><ul><li><p>安装抓包工具 HttpWatch (IE插件)</p></li><li><p>打开tomcat. 输入localhost:8080 打开首页</p></li><li><p>在首页上找到Example—&gt;选择 Servlet Examples—&gt; Request Parameter</p></li><li><p>接着点击Request  Parameters 的 Execute超链接，会出现请求参数示例</p></li><li><p>执行tomcat的例子，然后查看浏览器和 tomcat服务器的对接细节</p></li></ul><h1 id="三、Http请求数据解释"><a href="#三、Http请求数据解释" class="headerlink" title="三、Http请求数据解释"></a>三、Http请求数据解释</h1><ul><li><strong>请求的数据里面包含三个部分内容 ： 请求行 、 请求头 、请求体</strong></li><li>请求行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /examples/servlets/servlet/RequestParamExample HTTP/1.1 </span><br><span class="line"></span><br><span class="line">POST ： 请求方式 ，以post去提交数据</span><br><span class="line"></span><br><span class="line">/examples/servlets/servlet/RequestParamExample</span><br><span class="line">请求的地址路径 ， 就是要访问哪个地方。</span><br><span class="line"></span><br><span class="line">HTTP/1.1 协议版本</span><br></pre></td></tr></table></figure><ul><li>请求头：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*</span><br><span class="line">Referer: http://localhost:8080/examples/servlets/servlet/RequestParamExample</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Content-Length: 31</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">Accept: 客户端向服务器端表示，我能支持什么类型的数据。 </span><br><span class="line">Referer ： 真正请求的地址路径，全路径</span><br><span class="line">Accept-Language: 支持语言格式</span><br><span class="line">User-Agent: 用户代理 向服务器表明，当前来访的客户端信息。 </span><br><span class="line">Content-Type： 提交的数据类型。经过urlencoding编码的form表单的数据</span><br><span class="line">Accept-Encoding： gzip, deflate ： 压缩算法 。 </span><br><span class="line">Host ： 主机地址</span><br><span class="line">Content-Length： 数据长度</span><br><span class="line">Connection : Keep-Alive 保持连接</span><br><span class="line">Cache-Control ： 对缓存的操作</span><br></pre></td></tr></table></figure><ul><li>请求体：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器真正发送给服务器的数据 </span><br><span class="line"></span><br><span class="line">发送的数据呈现的是key=value ,如果存在多个数据，那么使用 &amp;</span><br><span class="line"></span><br><span class="line">firstname=zhang&amp;lastname=sansan</span><br></pre></td></tr></table></figure><h1 id="四、Http响应数据解析"><a href="#四、Http响应数据解析" class="headerlink" title="四、Http响应数据解析"></a>四、Http响应数据解析</h1><ul><li><strong>请求的数据里面包含三个部分内容 ： 响应行 、 响应头 、响应体</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">Content-Length: 673</span><br><span class="line">Date: Fri, 17 Feb 2017 02:53:02 GMT</span><br><span class="line"></span><br><span class="line">...这里还有很多数据...</span><br></pre></td></tr></table></figure><ul><li>响应行：第一行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">协议版本  </span><br><span class="line">状态码 </span><br><span class="line">咱们这次交互到底是什么样结果的一个code. </span><br><span class="line">200 : 成功，正常处理，得到数据。</span><br><span class="line">403  : <span class="keyword">for</span> bidden  拒绝</span><br><span class="line">404 ： Not Found</span><br><span class="line">500 ： 服务器异常</span><br><span class="line">OK</span><br><span class="line">对应前面的状态码</span><br></pre></td></tr></table></figure><ul><li>响应头</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Server:  服务器是哪一种类型。  Tomcat</span><br><span class="line">Content-Type ： 服务器返回给客户端你的内容类型</span><br><span class="line">Content-Length ： 返回的数据长度</span><br><span class="line">Date ： 通讯的日期，响应的时间</span><br></pre></td></tr></table></figure><h1 id="五、Get-和-Post请求区别"><a href="#五、Get-和-Post请求区别" class="headerlink" title="五、Get 和  Post请求区别"></a>五、Get 和  Post请求区别</h1><ul><li>post</li></ul><ol><li>数据是以流的方式写过去，不会在地址栏上面显示。  现在一般提交数据到服务器使用的都是POST。</li><li>以流的方式写数据，所以数据没有大小限制。</li></ol><ul><li>get</li></ul><ol><li>会在地址栏后面拼接数据，所以有安全隐患。 一般从服务器获取数据，并且客户端也不用提交上面数据的时候，可以使用GET。</li><li>能够带的数据有限， 1kb大小。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http协议：针对网络上的客户端 与 服务器端在执行http请求的时候，遵守的一种规范。 规定了客户端在访问服务器端的时候,服务器端返回数据的时候，要带上什么东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Http协议" scheme="http://yoursite.com/tags/Http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Servlet学习笔记</title>
    <link href="http://yoursite.com/2020/02/08/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/08/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-08T05:01:53.000Z</published>
    <updated>2020-03-07T09:53:03.963Z</updated>
    
    <content type="html"><![CDATA[<p>java Web离不开Servlet，它其实就是一个java程序，运行在我们的web服务器上，用于<strong>接收和响应</strong> 客户端的http请求。 </p><a id="more"></a><h2 id="一、Web资源介绍"><a href="#一、Web资源介绍" class="headerlink" title="一、Web资源介绍"></a>一、Web资源介绍</h2><ul><li><strong>在http协议当中，规定了请求和响应双方， 客户端和服务器端。与web相关的资源。</strong></li><li>有两种分类：</li><li>静态资源：html 、 js、 css</li><li>动态资源：servlet/jsp</li></ul><h2 id="二、Servlet介绍"><a href="#二、Servlet介绍" class="headerlink" title="二、Servlet介绍"></a>二、Servlet介绍</h2><ul><li><strong>servlet是什么?</strong><ol><li>其实就是一个java程序，运行在我们的web服务器上，用于<strong>接收和响应</strong> 客户端的http请求。 </li><li>更多的是配合动态资源来做。 当然静态资源也需要使用到servlet，只不过是Tomcat里面已经定义好了一个 DefaultServlet</li></ol></li></ul><h2 id="三、Selvlet简单使用Web工程"><a href="#三、Selvlet简单使用Web工程" class="headerlink" title="三、Selvlet简单使用Web工程"></a>三、Selvlet简单使用Web工程</h2><ol><li><p>得写一个Web工程 ， 要有一个服务器。</p></li><li><p>测试运行Web工程：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">得写一个Web工程 ， 要有一个服务器。</span><br><span class="line">测试运行Web工程</span><br><span class="line">1. 新建一个类， 实现Servlet接口`public class HelloServlet implements Servlet&#123;&#125;`</span><br><span class="line"></span><br><span class="line">2. 配置Servlet ， 用意： 告诉服务器，我们的应用有这么些个servlet。</span><br><span class="line">在webContent/WEB-INF/web.xml里面写上以下内容：</span><br><span class="line"></span><br><span class="line">  &lt;!-- 向tomcat报告， 我这个应用里面有这个servlet， 名字叫做HelloServlet , 具体的路径是com.itheima.servlet.HelloServlet --&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.itheima.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 注册servlet的映射。  servletName : 找到上面注册的具体servlet，  url-pattern: 在地址栏上的path 一定要以/打头 --&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/a&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">3. 在地址栏上输入 http://localhost:8080/项目名称/a</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200226115856385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="四、Servlet执行过程"><a href="#四、Servlet执行过程" class="headerlink" title="四、Servlet执行过程"></a>四、Servlet执行过程</h2><p><img src="https://img-blog.csdnimg.cn/20200226120652999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="五、Servlet的通用写法"><a href="#五、Servlet的通用写法" class="headerlink" title="五、Servlet的通用写法"></a>五、Servlet的通用写法</h2><ul><li>实现Servlet接口，但接口里的方法很多，有些用不到。</li></ul><ol><li>Servlet (接口)        </li><li>GenericServlet    </li><li>HttpServlet （用于处理http的请求）</li></ol><ul><li>定义一个类，继承HttpServlet ,复写doGet 和 doPost</li></ul><p><img src="https://img-blog.csdnimg.cn/20200226124900942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="六、Servlet的生命周期方法"><a href="#六、Servlet的生命周期方法" class="headerlink" title="六、Servlet的生命周期方法"></a>六、Servlet的生命周期方法</h2><ul><li>生命周期： 从创建到销毁的一段时间</li><li>生命周期方法： 从创建到销毁，所调用的那些方法。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. init方法</span><br><span class="line">在创建该servlet的实例时，就执行该方法。</span><br><span class="line">一个servlet只会初始化一次， init方法只会执行一次</span><br><span class="line">默认情况下是 ： 初次访问该servlet，才会创建实例。 </span><br><span class="line"></span><br><span class="line">2.service方法</span><br><span class="line">只要客户端来了一个请求，那么就执行这个方法了。</span><br><span class="line">该方法可以被执行很多次。 一次请求，对应一次service方法的调用</span><br><span class="line"></span><br><span class="line">3.destroy方法</span><br><span class="line">servlet销毁的时候，就会执行该方法</span><br><span class="line">1. 该项目从tomcat的里面移除。</span><br><span class="line">  2. 正常关闭tomcat就会执行 shutdown.bat</span><br><span class="line"></span><br><span class="line">4. doGet 和 doPost不算生命周期方法。</span><br><span class="line">所谓的生命周期方法是指，从对象的创建到销毁一定会执行的方法， 但是这两个方法，不一定会执行。</span><br><span class="line">``` </span><br><span class="line"><span class="comment">## 七、让Servlet创建实例的时机提前。</span></span><br><span class="line">1. 默认情况下，只有在初次访问servlet的时候，才会执行init方法。 有的时候，我们可能需要在这个方法里面执行一些初始化工作，甚至是做一些比较耗时的逻辑。 </span><br><span class="line"></span><br><span class="line">2. 那么这个时候，初次访问，可能会在init方法中逗留太久的时间。 为了提升用户的体验，需要让这个初始化的时机提前一点。 </span><br><span class="line"></span><br><span class="line">3. 在配置的时候， 使用load-on-startup元素来指定， 给定的数字越小，启动的时机就越早。 一般不写负数， 从2开始即可。 </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;HelloServlet04&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;com.itheima.servlet.HelloServlet04&lt;/servlet-class&gt;</span><br><span class="line">&lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure><h2 id="八、ServletConfig"><a href="#八、ServletConfig" class="headerlink" title="八、ServletConfig"></a>八、ServletConfig</h2><ul><li><strong>Servlet的配置，通过这个对象，可以获取servlet在配置的时候一些信息。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 得到servlet配置对象 专门用于在配置servlet的信息</span></span><br><span class="line">ServletConfig config = getServletConfig();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到的是配置servlet里面servlet-name 的文本内容</span></span><br><span class="line">String servletName = config.getServletName();</span><br><span class="line">System.out.println(<span class="string">"servletName="</span>+servletName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 可以获取具体的某一个参数。 </span></span><br><span class="line">String address = config.getInitParameter(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(<span class="string">"address="</span>+address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取所有的参数名称</span></span><br><span class="line">Enumeration&lt;String&gt; names = config.getInitParameterNames();</span><br><span class="line"><span class="comment">//遍历取出所有的参数名称</span></span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">String key = (String) names.nextElement();</span><br><span class="line">String value = config.getInitParameter(key);</span><br><span class="line">System.out.println(<span class="string">"key==="</span>+key + <span class="string">"   value="</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数在哪里配置？在web.xml中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;aa&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;com.daq.servlet.HelloServletConfig&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 可以添加初始化参数 --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;adress&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;bejing&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;HelloServlet02&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/HelloServlet02&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h2 id="九、为什么需要有ServletConfig？"><a href="#九、为什么需要有ServletConfig？" class="headerlink" title="九、为什么需要有ServletConfig？"></a>九、为什么需要有ServletConfig？</h2><ol><li><p>未来我们自己开发的一些应用，使用到了一些技术，或者一些代码，我们不会。 但是有人写出来了。做成了jar包，它的代码放置在了自己的servlet类里面。 </p></li><li><p>刚好这个servlet 里面需要一个数字或者叫做变量值。 但是这个值不能是固定了。 所以要求使用到这个servlet的公司，在注册servlet的时候，必须要在web.xml里面，声明init-params</p></li><li><p>在开发当中比较少用。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java Web离不开Servlet，它其实就是一个java程序，运行在我们的web服务器上，用于&lt;strong&gt;接收和响应&lt;/strong&gt; 客户端的http请求。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>XML学习</title>
    <link href="http://yoursite.com/2020/02/08/XML%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/02/08/XML%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-08T05:01:53.000Z</published>
    <updated>2020-03-07T07:51:11.926Z</updated>
    
    <content type="html"><![CDATA[<p><strong>XML:  extendsible  markup  labguage  可扩展的标记语言</strong></p><a id="more"></a><h2 id="一、XML的作用？"><a href="#一、XML的作用？" class="headerlink" title="一、XML的作用？"></a>一、XML的作用？</h2><ol><li>可以用来保存数据（数据多的时候用数据库，少量时候用XML）</li><li>可以用来做配置文件</li><li>数据传输载体</li></ol><h2 id="二、XML文档结构-倒状树形结构"><a href="#二、XML文档结构-倒状树形结构" class="headerlink" title="二、XML文档结构_倒状树形结构"></a>二、XML文档结构_倒状树形结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;stus&gt;</span><br><span class="line">&lt;stu&gt;</span><br><span class="line">&lt;name&gt;daiaoqi&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;desc&gt;我要学编程&lt;/desc&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;stu&gt;</span><br><span class="line">&lt;name&gt;wt&lt;/name&gt;</span><br><span class="line">&lt;age&gt;20&lt;/age&gt;</span><br><span class="line">&lt;desc&gt;我要找工作&lt;/desc&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;/stus&gt;</span><br></pre></td></tr></table></figure><h2 id="三、文档定义-amp-声明"><a href="#三、文档定义-amp-声明" class="headerlink" title="三、文档定义&amp;声明"></a>三、文档定义&amp;声明</h2><ul><li>定义：其实就是一个文件，文件的后缀为 <strong>.xml</strong></li><li>声明：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"gbk"</span> standalone=<span class="string">"no"</span> ?&gt;</span><br><span class="line">version : 解析这个xml的时候，使用什么版本的解析器解析</span><br><span class="line">encoding : 解析xml中的文字的时候，使用什么编码来翻译</span><br><span class="line">standalone  : no：该文档会依赖关联其他文档，yes：这是一个独立的文档</span><br></pre></td></tr></table></figure><ul><li>encoding：默认文件保存的时候，使用的是GBK的编码保存。<br>要想让我们的xml能够正常的显示中文，有以下解决办法：<ol><li>让encoding也是GBK 或者 gb2312 。</li><li>如果encoding是 utf-8 ， 那么保存文件的时候也必须使用utf-8。</li><li>保存的时候见到的ANSI 对应的其实是我们的本地编码 GBK。</li><li>为了通用，建议使用UTF-8编码保存，以及encoding 都是 utf-8。</li></ol></li></ul><h2 id="四、元素定义"><a href="#四、元素定义" class="headerlink" title="四、元素定义"></a>四、元素定义</h2><p>1.其实就是里面的标签， &lt;&gt; 括起来的都叫元素 。 成对出现。  如下： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;stu&gt; &lt;/stu&gt;</span><br></pre></td></tr></table></figure><p>2.文档声明下来的第一个元素叫做根元素 (根标签)<br>3.标签里面可以嵌套标签<br>4.空标签：既是开始也是结束， 一般配合属性来用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;age/&gt;</span><br><span class="line">&lt;stu&gt;</span><br><span class="line">&lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">&lt;age/&gt;</span><br><span class="line">&lt;/stu&gt;</span><br></pre></td></tr></table></figure><p>5.标签可以自定义。<br>XML 元素必须遵循以下命名规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.名称可以含字母、数字以及其他的字符 </span><br><span class="line">2.名称不能以数字或者标点符号开始 </span><br><span class="line">3.名称不能以字符 “xml”（或者 XML、Xml）开始 </span><br><span class="line">4.名称不能包含空格 </span><br><span class="line">5.命名尽量简单，做到见名知义</span><br></pre></td></tr></table></figure><h2 id="五、元素定义"><a href="#五、元素定义" class="headerlink" title="五、元素定义"></a>五、元素定义</h2><ul><li>简单元素：元素里面包含了普通的文字</li><li>复杂元素：元素里面还可以嵌套其他的元素</li></ul><h2 id="六、属性定义"><a href="#六、属性定义" class="headerlink" title="六、属性定义"></a>六、属性定义</h2><ul><li>定义在元素里面， &lt;元素名称  属性名称=”属性的值”&gt;&lt;/元素名称&gt;</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;stus&gt;</span><br><span class="line">&lt;stu id=<span class="string">"10086"</span>&gt;</span><br><span class="line">&lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;stu id=<span class="string">"10087"</span>&gt;</span><br><span class="line">&lt;name&gt;李四&lt;/name&gt;</span><br><span class="line">&lt;age&gt;28&lt;/age&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;/stus&gt;</span><br></pre></td></tr></table></figure><h2 id="七、xml注释"><a href="#七、xml注释" class="headerlink" title="七、xml注释"></a>七、xml注释</h2><p>与html的注释一样。 xml的注释，不允许放置在文档的第一行。 必须在文档声明的下面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- --&gt; </span><br><span class="line">如： </span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">//这里有两个学生</span><br><span class="line">//一个学生，名字叫张三， 年龄18岁， 学号：10086</span><br><span class="line">//另外一个学生叫李四  。。。</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="八、CDATA区"><a href="#八、CDATA区" class="headerlink" title="八、CDATA区"></a>八、CDATA区</h2><ul><li>所有 XML 文档中的文本均会被解析器解析，只有 CDATA 区段（CDATA section）中的文本会被解析器忽略。<br>在 XML 元素中，”&lt;” 和 “&amp;” 是非法的。”&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始，”&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。<br>在html中，某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</li><li>一般在数据传输的时候会出现，比如说服务器给客户端传数据。</li><li>严格地讲，在 XML 中仅有字符 “&lt;”和”&amp;” 是非法的。省略号、引号和大于号是合法的，但是把它们替换为实体引用是个好的习惯。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;   &amp;lt;</span><br><span class="line">&amp;   &amp;amp;</span><br></pre></td></tr></table></figure><ul><li>CDATA区写法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CDATA区 开始于 <span class="string">"&lt;![CDATA["</span></span><br><span class="line">        结束于 <span class="string">"]]&gt;"</span></span><br><span class="line">    如：</span><br><span class="line">&lt;des&gt;&lt;![CDATA[&lt;a href=<span class="string">"http://www.baidu.com"</span>&gt;我要学编程&lt;/a&gt;]]&gt;&lt;/des&gt;</span><br></pre></td></tr></table></figure><h2 id="九、XML解析"><a href="#九、XML解析" class="headerlink" title="九、XML解析"></a>九、XML解析</h2><ul><li>其实就是获取元素里面的字符数据或者属性数据。</li><li>XML解析方式(<strong>面试常问</strong>)有很多种，常用的有两种（DOM和SAX）。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200224114632758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>针对以上两种解析方式，给出的解决方案有哪些？</li></ul><ol><li>jaxp  sun公司自带的， 比较繁琐</li><li>jdom        </li><li>dom4j  （常用）使用比较广泛<br>补充：jdom和dom4j的故事：刚开始都是一伙人做的，后来产生了分歧，另外一批人就做了dom4j，把jdom挤下去了。</li></ol><h2 id="十、Dom4j-基本用法"><a href="#十、Dom4j-基本用法" class="headerlink" title="十、Dom4j 基本用法"></a>十、Dom4j 基本用法</h2><p><img src="https://img-blog.csdnimg.cn/20200224140840458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.element(<span class="string">"stu"</span>) : 返回该元素下的第一个stu元素</span><br><span class="line">element.elements(); 返回该元素下的所有子元素。</span><br></pre></td></tr></table></figure><ol><li>创建SaxReader对象</li><li>指定解析的xml</li><li>获取根元素。</li><li>根据根元素获取子元素或者下面的子孙元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">javapackage com.daq.test;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.创建sax读取对象</span></span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();<span class="comment">//jdbc--classloader</span></span><br><span class="line"><span class="comment">//2.指定解析的xml源</span></span><br><span class="line">Document document=reader.read(<span class="keyword">new</span> File(<span class="string">"src/xml/stus.xml"</span>));</span><br><span class="line"><span class="comment">//3.得到元素</span></span><br><span class="line"><span class="comment">//得到根元素</span></span><br><span class="line">Element rootElement=document.getRootElement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.获取根元素下面的子元素age</span></span><br><span class="line"><span class="comment">//rootElement.element("age");</span></span><br><span class="line"><span class="comment">//System.out.println(rootElement.element("stu").element("age").getStringValue());</span></span><br><span class="line"></span><br><span class="line">List&lt;Element&gt; elements=rootElement.elements();</span><br><span class="line"><span class="comment">//遍历所有的stu元素</span></span><br><span class="line"><span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line"><span class="comment">//获取stu下面的name元素</span></span><br><span class="line">String name=element.element(<span class="string">"name"</span>).getText();</span><br><span class="line">String age=element.element(<span class="string">"age"</span>).getText();</span><br><span class="line">String adress=element.element(<span class="string">"adress"</span>).getText();</span><br><span class="line">System.out.println(<span class="string">"name="</span>+name+<span class="string">"age="</span>+age+<span class="string">"adress="</span>+adress);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、Dom4j-的-Xpath使用"><a href="#十一、Dom4j-的-Xpath使用" class="headerlink" title="十一、Dom4j 的 Xpath使用"></a>十一、Dom4j 的 Xpath使用</h2><ul><li>dom4j里面支持Xpath的写法。 xpath其实是<strong>xml的路径语言</strong>，支持我们在解析xml的时候，能够快速的定位到具体的某一个元素。<ol><li>添加jar包依赖 ：jaxen-1.1-beta-6.jar</li><li>在查找指定节点的时候，根据XPath语法规则来查找</li><li>后续的代码与以前的解析代码一样。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要想使用Xpath， 还得添加支持的jar 获取的是第一个 只返回一个。 </span></span><br><span class="line">Element nameElement = (Element) rootElement.selectSingleNode(<span class="string">"//name"</span>);</span><br><span class="line">System.out.println(nameElement.getText());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文档里面的所有name元素 </span></span><br><span class="line">List&lt;Element&gt; list = rootElement.selectNodes(<span class="string">"//name"</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">System.out.println(element.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、XML-约束（了解即可）"><a href="#十二、XML-约束（了解即可）" class="headerlink" title="十二、XML 约束（了解即可）"></a>十二、XML 约束（了解即可）</h2><p>如下的文档， 属性的ID值是一样的。 这在生活中是不可能出现的。 并且第二个学生的姓名有好几个。 一般也很少。那么怎么规定ID的值唯一， 或者是元素只能出现一次，不能出现多次？ 甚至是规定里面只能出现具体的元素名字。 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;stus&gt;</span><br><span class="line">&lt;stu id=<span class="string">"10086"</span>&gt;</span><br><span class="line">&lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">&lt;age&gt;18&lt;/age&gt;</span><br><span class="line">&lt;address&gt;深圳&lt;/address&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;stu id=<span class="string">"10086"</span>&gt;</span><br><span class="line">&lt;name&gt;李四&lt;/name&gt;</span><br><span class="line">&lt;name&gt;李五&lt;/name&gt;</span><br><span class="line">&lt;name&gt;李六&lt;/name&gt;</span><br><span class="line">&lt;age&gt;28&lt;/age&gt;</span><br><span class="line">&lt;address&gt;北京&lt;/address&gt;</span><br><span class="line">&lt;/stu&gt;</span><br><span class="line">&lt;/stus&gt;</span><br></pre></td></tr></table></figure><p><strong>约束：</strong></p><ul><li>DTD：语法自成一派， 早前就出现的。 可读性比较差。 </li><li>Schema：其实就是一个xml ， 使用xml的语法规则， xml解析器解析起来比较方便 ， 是为了替代DTD 。但是Schema 约束文本内容比DTD的内容还要多。 所以目前也没有真正意义上的替代DTD</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;XML:  extendsible  markup  labguage  可扩展的标记语言&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="XML" scheme="http://yoursite.com/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat发布项目的三种方式</title>
    <link href="http://yoursite.com/2020/02/07/Tomcat%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/07/Tomcat%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-02-07T05:01:53.000Z</published>
    <updated>2020-03-07T07:50:43.658Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Tomcat发布项目到服务器上的三种方式</p><a id="more"></a><h2 id="一、拷贝这个文件到webapps-ROOT底下，-在浏览器里面访问。"><a href="#一、拷贝这个文件到webapps-ROOT底下，-在浏览器里面访问。" class="headerlink" title="一、拷贝这个文件到webapps/ROOT底下， 在浏览器里面访问。"></a>一、拷贝这个文件到webapps/ROOT底下， 在浏览器里面访问。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/stu.xml</span><br></pre></td></tr></table></figure><ul><li>在webaps下面新建一个文件夹xml  , 然后拷贝文件放置到这个文件夹中</li><li><a href="http://localhost:8080/xml/stu.xml" target="_blank" rel="noopener">http://localhost:8080/xml/stu.xml</a></li><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ： 对应的是到webapps/root</li><li><a href="http://localhost:8080/xml/" target="_blank" rel="noopener">http://localhost:8080/xml/</a> : 对应是 webapps/xml</li><li>使用IP地址访问：http://本机ip:8080/xml/stu.xml</li></ul><h2 id="二、配置虚拟路径"><a href="#二、配置虚拟路径" class="headerlink" title="二、配置虚拟路径"></a>二、配置虚拟路径</h2><p> 使用localhost：8080 打开tomcat首页， 找到Tomcat 8.5 Documentation,进入Reference，点击configuration ，找到左边的context，点击进入，复制此页面路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/docs/config/context.html</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200225123552708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在conf/server.xml 找到host元素节点。加入以下内容。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200225124622947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在浏览器地址栏上输入： <a href="http://localhost:8080/daq/person.xml" target="_blank" rel="noopener">http://localhost:8080/daq/person.xml</a></li></ul><h2 id="配置虚拟路径2"><a href="#配置虚拟路径2" class="headerlink" title="配置虚拟路径2"></a>配置虚拟路径2</h2><ol><li><p>在<code>tomcat/conf/catalina/localhost/</code> 文件夹下新建一个xml文件，名字可以自己定义。 <code>person.xml</code></p></li><li><p>在这个文件里面写入以下内容</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">'1.0'</span> encoding=<span class="string">'utf-8'</span>?&gt;</span><br><span class="line">&lt;Context docBase=<span class="string">"F：\XML2"</span>&gt;&lt;/Context&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在浏览器上面访问:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/person/xml的名字即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Tomcat发布项目到服务器上的三种方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>认识web服务器&amp;Eclipse配置部署Tomcat</title>
    <link href="http://yoursite.com/2020/02/07/%E8%AE%A4%E8%AF%86web%E6%9C%8D%E5%8A%A1%E5%99%A8-Eclipse%E9%85%8D%E7%BD%AE%E9%83%A8%E7%BD%B2Tomcat/"/>
    <id>http://yoursite.com/2020/02/07/%E8%AE%A4%E8%AF%86web%E6%9C%8D%E5%8A%A1%E5%99%A8-Eclipse%E9%85%8D%E7%BD%AE%E9%83%A8%E7%BD%B2Tomcat/</id>
    <published>2020-02-07T05:01:53.000Z</published>
    <updated>2020-03-07T07:55:01.839Z</updated>
    
    <content type="html"><![CDATA[<p>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS。</p><a id="more"></a><h2 id="一、程序架构"><a href="#一、程序架构" class="headerlink" title="一、程序架构"></a>一、程序架构</h2><ul><li>C /  S (client / server)<br>如：QQ  微信   LOL<br>优点：有一部分代码写在客户端，用户体验比较好。<br>缺点：占用资源大，比较吃硬盘，服务器更新，客户端也要随之更新。</li><li>B / S (browser / server)<br>如：网页QQ，  网页游戏。<br>优点：客户端只要浏览器就可以了，占用资源小，不用更新。<br>缺点：用户体验不佳。</li></ul><h2 id="二、web服务器"><a href="#二、web服务器" class="headerlink" title="二、web服务器"></a>二、web服务器</h2><ul><li><strong>服务器：其实服务器就是一台电脑。 配置比一般的要好。</strong></li><li>Web服务器软件 ：客户端在浏览器的地址栏上输入地址 ，然后web服务器软件，接收请求，然后响应消息。 </li></ul><ul><li>处理客户端的请求， 返回资源 | 信息</li></ul><ul><li>Web应用  需要服务器支撑。 index.html</li></ul><ul><li>常用web服务器：<br> Tomcat  —–apache 免费<br> WebLogic —–BEA  收费<br> Websphere —–IBM 收费<br> IIS   —–微软<h2 id="三、安装tomcat"><a href="#三、安装tomcat" class="headerlink" title="三、安装tomcat"></a>三、安装tomcat</h2></li><li>直接解压 ，然后找到bin/startup.bat</li><li>安装启动之后，如果能够正常看到黑窗口，表明已经成功安装。 为了确保万无一失， 最好在浏览器的地址栏上输入 ： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> , 如果有看到内容 就表明成功了。在黑窗口开着的同时输入网址。</li><li>出现控制台乱码问题，右键控制台，查看是GBK，还是UTF-8。然后在安装目录中找到conf–logging.properties文件，修改里面的编码方式，保持一致即可。</li><li>如果双击了startup.bat,  看到一闪而过的情形，一般都是 JDK的环境变量没有配置。<h2 id="四、Tomcat目录介绍"><a href="#四、Tomcat目录介绍" class="headerlink" title="四、Tomcat目录介绍"></a>四、Tomcat目录介绍</h2></li></ul><p><img src="https://img-blog.csdnimg.cn/20200225115238417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>bin： 包含了一些jar ,  bat文件 。  startup.bat。</p></li><li><p>conf：tomcat的配置   server.xml ，  web.xml。</p></li><li><p>lib：tomcat运行所需的jar文件。</p></li><li><p>logs：运行的日志文件。</p></li><li><p>temp：临时文件。</p></li><li><p>webapps：发布到tomcat服务器上的项目，就存放在这个目录。</p></li><li><p>work：jsp翻译成class文件存放地。</p></li></ul><h2 id="五、Eclipse配置Tomcat"><a href="#五、Eclipse配置Tomcat" class="headerlink" title="五、Eclipse配置Tomcat"></a>五、Eclipse配置Tomcat</h2><ol><li>Java EE 的视图下，在server里面，右键新建一个服务器， 选择到apache分类， 找到对应的tomcat版本， 接着一步一步配置即可。</li><li>配置完毕后， 在server 里面， 右键刚才的服务器，然后open  ， 找到上面的Server Location , 选择中间的 Use Tomcat installation…</li><li>创建web工程， 在WebContent下新建html文件， 右击工程， run as server<br><img src="https://img-blog.csdnimg.cn/20200225140218529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>至此成功！！！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档，也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache、 Nginx 、IIS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>DBUtils学习笔记</title>
    <link href="http://yoursite.com/2020/02/06/DBUtils%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/06/DBUtils%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-06T12:05:03.000Z</published>
    <updated>2020-03-07T07:45:05.167Z</updated>
    
    <content type="html"><![CDATA[<p>DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程序的开发，同时也不会影响程序的性能。并且简化了增删改查的操作。</p><a id="more"></a><h1 id="使用开源的DBUtils"><a href="#使用开源的DBUtils" class="headerlink" title="使用开源的DBUtils"></a>使用开源的DBUtils</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Commons DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程序的开发，同时也不会影响程序的性能。</li><li>简化了增删改查的操作。</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>增删改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.导入jar包  commons-dbutils-1.4.jar</span><br><span class="line">public class TestDBUtils &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testInsert() throws SQLException &#123;</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">// dbutils 只是帮我们简化了CRUD 的代码， 但是连接的创建以及获取工作。 不在他的考虑范围</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(dataSource);</span><br><span class="line">// 增加</span><br><span class="line">queryRunner.update(<span class="string">"insert into category values (null , ? , ? )"</span>, <span class="string">"a"</span>, 1000);</span><br><span class="line">// 删除</span><br><span class="line">queryRunner.update(<span class="string">"delete from account where id = ?"</span>, 5);</span><br><span class="line">// 更新</span><br><span class="line">queryRunner.update(<span class="string">"update account set money = ? where id = ?"</span>, 10000000, 6);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.直接new接口的匿名实现类</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">Account  account =  queryRunner.query(<span class="string">"select * from account where id = ?"</span>, new ResultSetHandler&lt;Account&gt;()&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Account handle(ResultSet rs) throws SQLException &#123;</span><br><span class="line">Account account  =  new Account();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">int money = rs.getInt(<span class="string">"money"</span>);</span><br><span class="line"></span><br><span class="line">account.setName(name);</span><br><span class="line">account.setMoney(money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> account;</span><br><span class="line">&#125; </span><br><span class="line"> &#125;, 6);</span><br><span class="line">System.out.println(account.toString());</span><br><span class="line"></span><br><span class="line">2. 直接使用框架已经写好的实现类。（最常用）</span><br><span class="line">QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</span><br><span class="line">//查询单个对象</span><br><span class="line">Account account = queryRunner.query(<span class="string">"select * from account where id = ?"</span>, </span><br><span class="line">new BeanHandler&lt;Account&gt;(Account.class), 8);</span><br><span class="line">System.out.println(category.toString());</span><br><span class="line"></span><br><span class="line">* 查询多个对象</span><br><span class="line">List&lt;Category&gt; list = queryRunner.query(<span class="string">"select * from category"</span>, new BeanListHandler&lt;Category&gt;(Category.class));</span><br><span class="line"><span class="keyword">for</span> (Category category : list) &#123;</span><br><span class="line">System.out.println(category.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ResultSetHandler-常用的实现类"><a href="#ResultSetHandler-常用的实现类" class="headerlink" title="ResultSetHandler 常用的实现类"></a>ResultSetHandler 常用的实现类</h1><ul><li>以下两个是使用频率最高的</li></ul><ol><li><p>BeanHandler          查询到的<strong>单个</strong>数据封装成一个对象</p></li><li><p>BeanListHandler    查询到的<strong>多个</strong>数据封装 成一个List&lt;对象&gt;</p></li><li><p>ArrayHandler,  查询到的单个数据封装成一个数组。</p></li><li><p>ArrayListHandler,  查询到的多个数据封装成一个集合 ，集合里面的元素是数组。 </p></li><li><p>MapHandler,  查询到的单个数据封装成一个map</p></li><li><p>MapListHandler,查询到的多个数据封装成一个集合 ，集合里面的元素是map。 </p></li><li><p>ColumnListHandler</p></li><li><p>KeyedHandler</p></li><li><p>ScalarHandler</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程序的开发，同时也不会影响程序的性能。并且简化了增删改查的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql,DBUtils" scheme="http://yoursite.com/tags/MySql-DBUtils/"/>
    
  </entry>
  
  <entry>
    <title>事务-学习笔记</title>
    <link href="http://yoursite.com/2020/02/05/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/02/05/%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-02-05T12:05:03.000Z</published>
    <updated>2020-03-07T07:56:16.785Z</updated>
    
    <content type="html"><![CDATA[<p>事务（Transaction），一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。</p><a id="more"></a><h1 id="一、事务（Transaction）概述"><a href="#一、事务（Transaction）概述" class="headerlink" title="一、事务（Transaction）概述"></a>一、事务（Transaction）概述</h1><ul><li>其实指的一组操作，里面包含许多个单一的逻辑。只要有一个逻辑没有执行成功，那么都算失败。 所有的数据都回归到最初的状态(<strong>回滚</strong>)。</li><li><strong>为什么要有事务?</strong><br>为了确保逻辑的成功。 如： 银行转账。 </li></ul><h1 id="二、演示事务"><a href="#二、演示事务" class="headerlink" title="二、演示事务"></a>二、演示事务</h1><ul><li>命令行方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开启事务：</span><br><span class="line">start transaction;</span><br><span class="line">提交：</span><br><span class="line">commit; 提交事务， 数据将会写到磁盘上的数据库</span><br><span class="line">回滚：</span><br><span class="line">rollback ;  数据回滚，回到最初的状态。</span><br></pre></td></tr></table></figure><ul><li>代码里面的事务，主要是针对连接来的。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-通过conn.setAutoCommit（<span class="literal">false</span> ）来关闭自动提交的设置。</span><br><span class="line">-提交事务  conn.commit();</span><br><span class="line">-回滚事务 conn.rollback();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testTransaction</span></span>()&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">PreparedStatement ps = null;</span><br><span class="line">ResultSet rs = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"></span><br><span class="line">//连接，事务默认就是自动提交的。 关闭自动提交。</span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"update account set money = money - ? where id = ?"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">//扣钱， 扣ID为1 的100块钱</span><br><span class="line">ps.setInt(1, 100);</span><br><span class="line">ps.setInt(2, 1);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">int a = 10 /0 ;//有了异常，下面代码就不会执行了</span><br><span class="line"></span><br><span class="line">//加钱， 给ID为2 加100块钱</span><br><span class="line">ps.setInt(1, -100);</span><br><span class="line">ps.setInt(2, 2);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">//成功： 提交事务。</span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">//失败： 回滚事务</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; catch (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;finally &#123;</span><br><span class="line">JDBCUtil.release(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、事务特性ACID（面试）"><a href="#三、事务特性ACID（面试）" class="headerlink" title="三、事务特性ACID（面试）"></a>三、事务特性ACID（面试）</h1><ul><li>原子性（Atom）<br>指的是 事务中包含的逻辑，不可分割。 </li><li>一致性（Consistent）<br>指的是 事务执行前后，数据完整性。</li><li>隔离性（Isolate）<br>指的是 事务在执行期间不应该受到其他事务的影响。</li><li>持久性（Durable）<br>指的是 事务执行成功，那么数据应该持久保存到磁盘上。</li></ul><h1 id="四、安全问题-amp-隔离级别（面试）"><a href="#四、安全问题-amp-隔离级别（面试）" class="headerlink" title="四、安全问题&amp;隔离级别（面试）"></a>四、安全问题&amp;隔离级别（面试）</h1><ul><li><strong>不考虑隔离级别设置</strong>，那么会出现以下问题。</li></ul><h2 id="读-问题"><a href="#读-问题" class="headerlink" title="读  问题"></a>读  问题</h2><ul><li>脏读<br>一个事务读到另外一个事务还未提交的数据。</li><li>不可重复读<br>一个事务读到了另外一个事务提交的数据 ，造成了前后两次查询结果不一致。</li><li>幻读<br>一个事务读到了另一个事务已提交的插入的数据，导致多次查询结果不一致。</li></ul><h2 id="写-问题"><a href="#写-问题" class="headerlink" title="写  问题"></a>写  问题</h2><ol><li><p>丢失更新：<br>B事务如果提交，会造成A事务的操作无效。<br>B事务回滚，也会造成A事务更新失效。</p></li><li><p>解决方法：悲观锁，乐观锁</p></li></ol><ul><li><strong>悲观锁</strong><br>指事务在一开始就认为丢失更新一定会发生， 这是一件很悲观的事情。 具体操作步骤如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.所以事务在执行操作前，先查询一次数据， 查询语句如下：</span><br><span class="line">select * from student  <span class="keyword">for</span> update  ;           </span><br><span class="line">后面的<span class="keyword">for</span> update 其实是数据库锁机制 、 一种排他锁。</span><br><span class="line"></span><br><span class="line">2.哪个事务先执行这个语句， 哪个事务就持有了这把锁， 可以查询出来数据， 后面的事务想再执行这条语句，不会有任何数据显示，就只能等着。 </span><br><span class="line"></span><br><span class="line">3.一直等到前面的那个事务提交数据后， 后面的事务数据才会出来，那么才可以往下接着操作。</span><br><span class="line"> </span><br><span class="line">4.补充：就像排队上厕所一样，只有里面的人出来了，才能进去。 这其实就是 java 中的同步的概念。</span><br></pre></td></tr></table></figure><ul><li><strong>乐观锁</strong><br>乐观锁是指，从来不会觉得丢失更新会发生。要求程序员在数据库中添加字段，然后在后续更新的时候，对该字段进行判定比对， 如果一致才允许更新。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">1.数据库表中，额外添加了一个version字段， 用于记录版本， 默认从0 开始， 只要有针对表中数据进行修改的，那么version就+1.</span><br><span class="line"></span><br><span class="line">2.开启A事务， 然后开启B事务 。</span><br><span class="line"></span><br><span class="line">3.A 先执行数据库表操作。 因为以前都没有人修改过。 所以是允许A事务修改数据库的，但是修改完毕，就把version的值变成  1 了 。</span><br><span class="line"></span><br><span class="line">4.B事务， 这时候如果想执行修改，那么是不允许修改的。 因为B事务以前是没有查询过数据库内容的，所以它认为数据库版本还是0 。 但是数据库的版本经过A修改，已经是1了。</span><br><span class="line">所以这时候不允许修改， 要求其重新查询 。</span><br><span class="line"></span><br><span class="line">5.B重新查询后， 将会得到version 为 1的数据，这份数据就是之前A 事务修改的数据了， B 在进行修改，也是在A的基础上修改的。 所以就不会有丢失更新的情况出现了。</span><br><span class="line"></span><br><span class="line">补充：乐观锁的机制 ，其实是通过比对版本或者比对字段的方式来实现的，与版本控制软件【SVN , GIT】机制是一样的。</span><br></pre></td></tr></table></figure><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 按效率划分，从高到低</span><br><span class="line">读未提交  &gt; 读已提交  &gt; 可重复读  &gt; 可串行化</span><br><span class="line"></span><br><span class="line">- 按拦截程度 ，从高到底</span><br><span class="line">可串行化 &gt; 可重复读  &gt; 读已提交  &gt;  读未提交</span><br></pre></td></tr></table></figure><ul><li>Read Uncommited【读未提交】<br>指的是 ： 一个事务可以读取到另一个事务还未提交的数据。 这就会引发 “脏读” 读取到的是数据库<strong>内存</strong>中的数据，而并非真正磁盘上的数据。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子： </span><br><span class="line">1.开启一个命令行窗口A， 开始事务，然后查询表中记录。  </span><br><span class="line">设置当前窗口的事务隔离级别为：读未提交  命令如下：</span><br><span class="line"><span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> uncommitted;</span><br><span class="line">2.另外在打开一个窗口B， 也开启事务， 然后执行 sql 语句， 但是不提交</span><br><span class="line">3.在A窗口重新执行查询， 会看到B窗口没有提交的数据。</span><br></pre></td></tr></table></figure><ul><li>Read Commited 【读已提交】<br>与前面的读未提交刚好相反，这个隔离级别是 ，只能读取到其他事务已经提交的数据，那些没有提交的数据是读不出来的。屏蔽了脏读的情况，但是这会造成一个问题是： 前后读取到的结果不一样。 发生了不可重复!!!, 所谓的不可重复读，就是不能执行多次读取，否则出现结果不一样。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">1. 开启一个命令行窗口A， 开始事务，然后查询表中记录。  </span><br><span class="line"> 设置当前窗口的事务隔离级别为：读已提交  命令如下：</span><br><span class="line"><span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> committed;</span><br><span class="line">2. 另外在打开一个窗口B， 也开启事务， 然后执行 sql 语句， 但是不提交 </span><br><span class="line">3. 在A窗口重新执行查询， 是不会看到B窗口刚才执行sql 语句的结果，因为它还没有提交。</span><br><span class="line">4. 在B窗口执行提交。</span><br><span class="line">5. 在A窗口中执行查看， 这时候才会看到B窗口已经修改的结果。</span><br><span class="line">6. 但是这会造成一个问题是： 在A窗口中， 第一次查看数据和第二次查看数据，结果不一样。</span><br></pre></td></tr></table></figure><ul><li>Repeatable Read 【重复读】<br>MySql 默认的隔离级别就是这个。该隔离级别， 可以让事务在自己的会话中重复读取数据，并且不会出现结果不一样的状况，即使其他事务已经提交了，也依然还是显示以前的数据。（读到的不是最新更新的数据，确保本事务不受其他事务影响）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">1. 开启一个命令行窗口A， 开始事务，然后查询表中记录。  </span><br><span class="line">2. 设置当前窗口的事务隔离级别为：重复读  命令如下：</span><br><span class="line"><span class="built_in">set</span> session transaction isolation level repeatable <span class="built_in">read</span>;</span><br><span class="line">3. 另外在打开一个窗口B， 也开启事务， 然后执行 sql 语句， 但是不提交 </span><br><span class="line">4. 在A窗口重新执行查询， 是不会看到B窗口刚才执行sql 语句的结果，因为它还没有提交。</span><br><span class="line">5. 在B窗口执行提交。</span><br><span class="line">6. 在A窗口中执行查看， 这时候查询结果，和以前的查询结果一致。不会发生改变。</span><br></pre></td></tr></table></figure><ul><li>Serializable 【可串行化（序列化）】<br>该事务级别是最高级的事务级别了，如果有一个连接设置隔离级别为可串行化，那么谁先打开事务，谁就有了先执行的权利，谁后打开事务，就只能等着，等前面的那个事务，提交或者回滚后才会执行。这种隔离级别比前面几种都要强大一点，也就是前面几种的问题【脏读、不可重复读、幻读】都能够解决。但是都使用该隔离级别也会有些问题。 比如造成并发的性能问题。 其他的事务必须得等当前正在操作表的事务先提交，才能接着往下，否则只能一直在等着。所以比较少用，容易造成性能上的问题，效率比较低。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">1.开启一个命令行窗口A， 开始事务，然后查询表中记录。  </span><br><span class="line">2.设置当前窗口的事务隔离级别为：serializable 命令如下：</span><br><span class="line"><span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> serializable;</span><br><span class="line">3.另外在打开一个窗口B， 也开启事务， 然后执行 sql 语句， 但是不提交 </span><br><span class="line">4.在A窗口重新执行查询， 会卡主，没有任何信息显示。 </span><br><span class="line">5.在B窗口执行提交。</span><br><span class="line">6.在A窗口中执行查看， 这时候才会显示结果。</span><br></pre></td></tr></table></figure><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>1.在代码里面使用事务 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">conn.commit();</span><br><span class="line">conn.rollback();</span><br></pre></td></tr></table></figure><p>2.事务只是针对连接连接对象，如果再开一个连接对象，那么那是默认的提交。<br>3.事务是会自动提交的。<br>4.安全隐患：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">读</span><br><span class="line">脏读：一个事务读到了另一个事务未提交的数据。</span><br><span class="line">不可重复读：一个事务读到了另一个事务已提交的数据，造成前后两次查询结果不一致。</span><br><span class="line">幻读：一个事务读到了另一个事务insert的数据 ，造成前后查询结果不一致 。</span><br><span class="line">写</span><br><span class="line">丢失更新。</span><br></pre></td></tr></table></figure><p>5.隔离级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">读未提交</span><br><span class="line">&gt; 引发问题： 脏读 </span><br><span class="line">读已提交</span><br><span class="line">&gt; 解决： 脏读 ， 引发： 不可重复读</span><br><span class="line">可重复读</span><br><span class="line">&gt; 解决： 脏读 、 不可重复读 ， 未解决： 幻读</span><br><span class="line">可串行化</span><br><span class="line">&gt; 解决： 脏读、 不可重复读 、 幻读。  导致：性能下降</span><br></pre></td></tr></table></figure><p>6.补充：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mySql 默认的隔离级别是 可重复读</span><br><span class="line">Oracle 默认的隔离级别是  读已提交</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事务（Transaction），一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="http://yoursite.com/2020/02/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/02/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2020-02-04T12:05:03.000Z</published>
    <updated>2020-03-07T07:57:01.189Z</updated>
    
    <content type="html"><![CDATA[<p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p><a id="more"></a><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li><strong>数据库的连接对象创建工作，比较消耗性能。</strong> </li><li>一开始现在内存中开辟一块空间（集合） ， 一开先往池子里面放置 多个连接对象。  后面需要连接的话，直接从池子里面去。不要去自己创建连接了。  使用完毕， 要记得归还连接。确保连接对象能循环利用。</li></ul><ul><li>连接池指：创建一个池子（容器） ， 专门用来管理连接对象。<br><img src="https://img-blog.csdnimg.cn/20200301155401842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><ul><li>创建和管理连接，对数据的操作没有影响。</li><li>更快响应速度，连接池里的连接在一开始就已经创建好了，后面如果需要直接拿就可以了，无需创建。</li><li>资源的重复利用、避免重复创建对象，连接对象使用完毕后，再归还到池子中进行统一管理即可。</li></ul><h2 id="三、自定义数据库连接池"><a href="#三、自定义数据库连接池" class="headerlink" title="三、自定义数据库连接池"></a>三、自定义数据库连接池</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 这是一个数据库连接池</span><br><span class="line"> * 一开始先往池子里面放十个连接</span><br><span class="line"> */</span><br><span class="line">public class MyDataSource implements DataSource &#123;</span><br><span class="line">//创建一个集合用来存放连接对象</span><br><span class="line">List&lt;Connection&gt; list=new ArrayList&lt;Connection&gt;();</span><br><span class="line">//用一个构造方法，刚开始就给这个池子里放入10个连接对象</span><br><span class="line">public <span class="function"><span class="title">MyDataSource</span></span>() &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">Connection conn = JDBCUtil.getconn();</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 该连接池对外公布的获取连接的方法</span><br><span class="line">@Override</span><br><span class="line">public Connection getConnection() throws SQLException &#123;</span><br><span class="line">//来拿连接的时候，先看看，池子里面有没有，没有了就再添加，扩容</span><br><span class="line"><span class="keyword">if</span>(list.size()==0) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">Connection conn = JDBCUtil.getconn();</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Connection conn=list.remove(0);</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用完之后返回连接对象</span><br><span class="line">public void addBack(Connection conn) &#123;</span><br><span class="line">list.add(conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用连接池</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class TestPool &#123;</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testPool</span></span>() &#123;</span><br><span class="line">Connection conn=null;</span><br><span class="line">PreparedStatement ps=null;</span><br><span class="line">MyDataSource dataSource=new MyDataSource();</span><br><span class="line">try &#123;</span><br><span class="line">conn=dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">"insert into category values(null,'lisi',daq)"</span>;</span><br><span class="line">ps=conn.prepareStatement(sql);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ps.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">//归还连接对象</span><br><span class="line">dataSource.addBack(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><ul><li>对象没有做成单例。<br>在哪里使用，都需要new MyDataSource().  这就会造成有多个对象的情况出现， 那就不只一个池子了。</li><li>需要额外记住 addBack方法。<br>由于sun公司定义的数据库连接池里面并没有这个addBack方法，所以要用这个连接池的时候，需要记住这个方法是用来回收连接对象的。</li><li>无法面向接口编程。<br>由于连接池直接定义成了一个类，并且里面还额外添加了一个addBack方法，这就造成了无法面向接口编程。</li></ul><p><strong>解决思路：</strong><br>由于多了一个addBack 方法，所以使用这个连接池的地方，需要额外记住这个方法，并且不能面向接口编程。</p><ol><li>修改接口中的close方法。  原来的Connection对象的close方法，是真的关闭连接。 </li><li>修改此close方法，以后在调用close， 并不是真的关闭，而是归还连接对象。如何扩展某一个方法?</li></ol><p>原有的方法逻辑，不是我们想要的。 想修改方法的逻辑，怎么办？</p><ol><li>直接改源码  无法实现。</li><li>继承， 必须得知道这个接口的具体实现是谁。 </li><li>使用装饰者模式。 </li><li>动态代理</li></ol><h3 id="解决方式：装饰者模式"><a href="#解决方式：装饰者模式" class="headerlink" title="解决方式：装饰者模式"></a>解决方式：装饰者模式</h3><p>两个不同的人，去实现同一个接口，先把我的方法执行了，再执行你的。</p><h2 id="四、开源连接池"><a href="#四、开源连接池" class="headerlink" title="四、开源连接池"></a>四、开源连接池</h2><h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h3><ul><li>DBCP（DataBase Connection Pool）数据库连接池，是java数据库连接池的一种，由Apache开发，通过数据库连接池，可以让程序自动管理数据库连接的释放和断开。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.导入jar包  commons-dbcp.jar和commons-pool.jar</span><br><span class="line">2.不使用配置文件方式（不常用）</span><br><span class="line">// 1.构建数据源对象</span><br><span class="line">BasicDataSource dataSource = new BasicDataSource();</span><br><span class="line"></span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">//Url格式-主协议：子协议：//本地//数据库</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://localhost/users"</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"daq"</span>);</span><br><span class="line">// 2.得到连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">String sql = <span class="string">"insert into user values(null,?,?)"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(1,<span class="string">"daq"</span>);</span><br><span class="line">ps.setInt(2,23);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line">...</span><br><span class="line">3.使用配置文件方式。(常用)</span><br><span class="line">1. 在 src 下定义配置文件 dbcp.properties. 内容如下： </span><br><span class="line">//连接设置</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/jdbc</span><br><span class="line">username=root</span><br><span class="line">password=daq</span><br><span class="line">...</span><br><span class="line">2. 使用代码读取配置文件，即可获取连接池</span><br><span class="line">BasicDataSourceFactory factory=new BasicDataSourceFactory();</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.load(new FileInputStream(<span class="string">"src/dbcp.properties"</span>));</span><br><span class="line">DataSource dataSource =factory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">String sql = <span class="string">"insert into user values(null,?,?)"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(1,<span class="string">"daq"</span>);</span><br><span class="line">ps.setInt(2,23);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="C3P0（重点）"><a href="#C3P0（重点）" class="headerlink" title="C3P0（重点）"></a>C3P0（重点）</h3><ul><li>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1. 拷贝jar 文件   c3p0-0.9.1.2.jar</span><br><span class="line">2. 不使用配置文件方式（开发的时候不会用）</span><br><span class="line">//默认会找 xml 中的 default-config 分支。 </span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">//2. 设置连接数据的信息</span><br><span class="line">dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost/users"</span>);</span><br><span class="line">dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"daq"</span>);</span><br><span class="line">//3. 获取连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">String sql = <span class="string">"insert into user values(null,?,?)"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(1,<span class="string">"daq"</span>);</span><br><span class="line">ps.setInt(2,23);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">3. 使用配置文件方式。（开发常用）</span><br><span class="line">c3p0的配置文件 支持 properties , 也支持 xml 方式。 不过开发中，一般使用xml方式来配置</span><br><span class="line"></span><br><span class="line">1.  src下， 创建xml文件，名为：c3p0-config.xml 　注意此处，名字需要固定了。</span><br><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">  &lt;default-config&gt;</span><br><span class="line">    &lt;property name=<span class="string">"driverClass"</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"jdbcUrl"</span>&gt;jdbc:mysql://localhost/user&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"user"</span>&gt;root&lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"password"</span>&gt;daq&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 可选配置 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"initialPoolSize"</span>&gt;10&lt;/property&gt;   //初始容量</span><br><span class="line">&lt;property name=<span class="string">"maxIdleTime"</span>&gt;30&lt;/property&gt; //</span><br><span class="line">&lt;property name=<span class="string">"maxPoolSize"</span>&gt;100&lt;/property&gt; //最大容量</span><br><span class="line">&lt;property name=<span class="string">"minPoolSize"</span>&gt;10&lt;/property&gt; //最小容量</span><br><span class="line">&lt;property name=<span class="string">"maxStatement"</span>&gt;200&lt;/property&gt; //</span><br><span class="line">  &lt;/default-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br><span class="line"></span><br><span class="line">//1. 代码中获取连接dataSource对象</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">//2. 获取连接对象</span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">String sql = <span class="string">"insert into user values(null,?,?)"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(1,<span class="string">"daq"</span>);</span><br><span class="line">ps.setInt(2,23);</span><br><span class="line"></span><br><span class="line">ps.executeUpdate();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql,连接池" scheme="http://yoursite.com/tags/MySql-%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>JDBC学习</title>
    <link href="http://yoursite.com/2020/02/03/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/02/03/JDBC%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-03T12:05:03.000Z</published>
    <updated>2020-03-07T07:43:20.794Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用JDBC连接到数据库</p><a id="more"></a><h2 id="一、添加JDBC驱动包"><a href="#一、添加JDBC驱动包" class="headerlink" title="一、添加JDBC驱动包"></a>一、添加JDBC驱动包</h2><p><img src="https://img-blog.csdnimg.cn/2020022310204253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200223102114577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/2020022310240148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二、使用JDBC简单步骤"><a href="#二、使用JDBC简单步骤" class="headerlink" title="二、使用JDBC简单步骤"></a>二、使用JDBC简单步骤</h2><ul><li>1、注册驱动`</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br></pre></td></tr></table></figure><ul><li>2、建立连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn=(Connection) DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost/数据库名"</span>, <span class="string">"root"</span>, <span class="string">"daq"</span>);</span><br></pre></td></tr></table></figure><ul><li>3、创建statement—-跟数据库打交道，一定需要这个对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st = conn.createStatement();</span><br></pre></td></tr></table></figure><ul><li>4、执行sql 查询，得到结果集ResultSet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from t_stu"</span>;</span><br><span class="line">ResultSet rs = st.executeQuery(sql);</span><br></pre></td></tr></table></figure><ul><li>5、遍历查询每一条记录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="string">"cid"</span>);</span><br><span class="line">String name =rs.getString(<span class="string">"cname"</span>);</span><br><span class="line">String desc =rs.getString(<span class="string">"cdesc"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"cid"</span>+id +<span class="string">"cname"</span>+name +<span class="string">"cdesc"</span>+desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6、关闭，释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">新建一个包放置适房资源的工具类，在JDBC释放资源时调用即可</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> 释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs,Statement st,Connection conn)</span></span>&#123;</span><br><span class="line">closeRs(rs);</span><br><span class="line">closeSt(st);</span><br><span class="line">closeConn(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeRs</span><span class="params">(ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">rs=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSt</span><span class="params">(Statement st)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">st=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConn</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">conn=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、JDBC工具类（修改原有代码）"><a href="#三、JDBC工具类（修改原有代码）" class="headerlink" title="三、JDBC工具类（修改原有代码）"></a>三、JDBC工具类（修改原有代码）</h2><ul><li>查看源代码，有一段静态代码块（类加载的时候就会执行），所以等同于说注册了两次驱动，其实驱动只需要注册一次就够了。</li><li><strong>1、注册驱动（防止二次注册）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">改成以下代码即可</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">引号里面是Driver的全路径</span><br></pre></td></tr></table></figure><ul><li><strong>2、在工具类中加方法getconn（）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> String url=<span class="string">"jdbc:mysql://localhost/daq"</span>;</span><br><span class="line"><span class="keyword">static</span> String name=<span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">static</span> String password=<span class="string">"daq"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getconn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">// 2.建立连接</span></span><br><span class="line">conn = (Connection) DriverManager.getConnection(</span><br><span class="line">url, name, password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>使用properties配置文件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.创建properties</span><br><span class="line">在src下面新建一个**jdbc.properties** 文件</span><br><span class="line">写入：</span><br><span class="line">driverClass=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost/daq</span></span><br><span class="line">name=root</span><br><span class="line">password=daq</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.读取properties</span><br><span class="line">在JDBCUtil工具类中添加静态代码块，保证工具类一加载，就可以读取配置文件。</span><br><span class="line"><span class="keyword">static</span> String driverClass = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.创建一个属性配置对象</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream("jdbc.properties");</span><br><span class="line"><span class="comment">// 导入输入流</span></span><br><span class="line">properties.load(is);</span><br><span class="line"><span class="comment">// 读取属性</span></span><br><span class="line">driverClass =properties.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line">url =properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">name =properties.getProperty(<span class="string">"name"</span>);</span><br><span class="line">password =properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、JDBC的CRUD"><a href="#四、JDBC的CRUD" class="headerlink" title="四、JDBC的CRUD"></a>四、JDBC的CRUD</h2><p><img src="https://img-blog.csdnimg.cn/20200223163750100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>insert（插入）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">INSERT INTO t_stu <span class="title">VALUES</span> <span class="params">(NULL,<span class="string">'wangqiang2'</span>,<span class="number">28</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 1. 获取连接对象</span></span></span><br><span class="line"><span class="function">conn </span>= JDBCUtil.getconn();</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"insert into t_stu values(null , 'aobama' , 59)"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="keyword">int</span> result = st.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>delete（删除）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM t_stu WHERE id = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"delete from stu where name='XXX'"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="keyword">int</span> result = st.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>query（查询）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t_stu</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 执行sql语句，返回ResultSet</span></span><br><span class="line">String sql = <span class="string">"select * from stu"</span>;</span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">int</span> age = rs.getInt(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(name + <span class="string">"   "</span> + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>update（更新）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_stu SET age = <span class="number">38</span> WHERE id = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 1. 获取连接对象</span></span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"><span class="comment">// 2. 根据连接对象，得到statement</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行添加</span></span><br><span class="line">String sql = <span class="string">"update t_stu set age = 26 where name ='qyq'"</span>;</span><br><span class="line"><span class="comment">//影响的行数， ，如果大于0 表明操作成功。 否则失败</span></span><br><span class="line"><span class="keyword">int</span> result = st.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &gt;<span class="number">0</span> )&#123;</span><br><span class="line">System.out.println(<span class="string">"更新成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"更新失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>补充：单元测试junit</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- 定义一个类， TestXXX , 里面定义方法 testXXX.</span><br><span class="line"></span><br><span class="line">- 添加junit的支持。 </span><br><span class="line"></span><br><span class="line">  右键工程 --- add Library --- Junit --- Junit4</span><br><span class="line"></span><br><span class="line">- 在方法的上面加上注解 ， 其实就是一个标记。</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- 光标选中方法名字，然后右键执行单元测试。  或者是打开outline视图， 然后选择方法右键执行。</span><br></pre></td></tr></table></figure><h2 id="五、DAO模式"><a href="#五、DAO模式" class="headerlink" title="五、DAO模式"></a>五、DAO模式</h2><ul><li><strong>Data Access Object 数据访问对象</strong></li></ul><p> <img src="https://img-blog.csdnimg.cn/20200223175345761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDg2MTM5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>1、新建一个dao的接口， 里面声明数据库访问规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义操作数据库的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、新建一个dao的实现类，具体实现早前定义的规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取连接对象</span></span><br><span class="line">conn = JDBCUtil.getConn();</span><br><span class="line"><span class="comment">//2. 创建statement对象</span></span><br><span class="line">st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"select * from t_user"</span>;</span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">String userName = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(userName+<span class="string">"="</span>+password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtil.release(conn, st, rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接使用实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">UserDao dao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">dao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、JDBC-Statement安全问题"><a href="#六、JDBC-Statement安全问题" class="headerlink" title="六、JDBC Statement安全问题"></a>六、JDBC Statement安全问题</h2><ul><li>Statement执行 ，其实是拼接sql语句的。  先拼接sql语句，然后在一起执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from t_user where username='"</span>+ username  +<span class="string">"' and password='"</span>+ password +<span class="string">"'"</span>;</span><br><span class="line"></span><br><span class="line">UserDao dao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">dao.login(<span class="string">"admin"</span>, <span class="string">"100234khsdf88' or '1=1"</span>);</span><br><span class="line"></span><br><span class="line">SELECT * FROM t_user WHERE username=<span class="string">'admin'</span> AND PASSWORD=<span class="string">'100234khsdf88'</span> or <span class="string">'1=1'</span> </span><br><span class="line"></span><br><span class="line">前面先拼接sql语句， 如果变量里面带有了 数据库的关键字，那么一并认为是关键字。 不认为是普通的字符串。 </span><br><span class="line">rs = st.executeQuery(sql);</span><br></pre></td></tr></table></figure><h2 id="七、PreparStatement-CRUD"><a href="#七、PreparStatement-CRUD" class="headerlink" title="七、PreparStatement  CRUD"></a>七、PreparStatement  CRUD</h2><ul><li>该对象就是替换前面的statement对象。</li><li>相比较以前的statement， 预先处理给定的sql语句，对其执行语法检查。 在sql语句里面使用 ? 占位符来替代后续要传递进来的变量。 后面进来的变量值，将会被看成是字符串，不会产生任何的关键字。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"insert into t_user values(null , ? , ?)"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//给占位符赋值 从左到右数过来，1 代表第一个问号， 永远你是1开始。</span></span><br><span class="line">ps.setString(<span class="number">1</span>, userName);</span><br><span class="line">ps.setString(<span class="number">2</span>, password);</span><br></pre></td></tr></table></figure><ul><li>PreparStatement的添加，删除，更新，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用JDBC连接到数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="JDBC,MySql" scheme="http://yoursite.com/tags/JDBC-MySql/"/>
    
  </entry>
  
</feed>
